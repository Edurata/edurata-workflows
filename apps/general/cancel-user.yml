apiRevision: edurata.io/workflow/v1
name: delete-microapp-user
title: Deletes a user from a microapp
description: The automated workflow begins by extracting data from an event based on the application name and input data. It then retrieves the application's configuration using its name and fetches data from an Airtable using specific URL and authorization. The workflow also retrieves and deletes deployment triggers from a specific URL using GET and DELETE methods respectively. If the trigger deletion is successful, a record is deleted from the Airtable. Finally, if the Airtable record deletion is successful, an email is sent to the user notifying them of the deletion of all resources related to their subscription.
interface:
  inputs:
    properties:
      data:
        type: object
        properties:
          fields:
            type: array
            items:
              type: object
              properties:
                label:
                  type: string
                value:
                  type: string
      applicationConfig:
        type: object
        description: |
          A mapping of applicationId to appName, appUrl, senderEmail, and peopleTableId.
        additionalProperties:
          type: object
          properties:
            appName:
              type: string
            appUrl:
              type: string
            senderEmail:
              type: string
            peopleTableId:
              type: string
    required:
    - data
    - applicationConfig
inputs:
  applicationConfig: ${variables.applicationConfig}
steps:
  extract-data-from-event:
    description: This step involves extracting data from an event depending on the application name and the input data.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { data, appName } = inputs;
        const emailField = data.fields[0]
        const uriEncodedId = encodeURIComponent(emailField.value);
        return {
          email: emailField.value,
          uriEncodedId,
        };
      }
    props:
      appName: ${extract-application-name-from-event.applicationName}
      data: ${inputs.data}
  extract-application-name-from-event:
    description: This step involves extracting the application name from an event, using the second field of the input data as the application name field.
    runtime: nodejs20
    interface:
      inputs:
        properties:
          appNameField:
            example:
              key: question_0dDJAA
              label: Which microapp do you want to update?
              type: DROPDOWN
              value:
              - c426210f-e82e-4259-ac93-f1bf3951da32
              options:
              - id: c09e221a-dbdb-4c04-a9cb-1b78e72e4a26
                text: Short story bot
              - id: c426210f-e82e-4259-ac93-f1bf3951da32
                text: Accounting bot
              - id: d45666ba-7026-4067-841a-5ba51bb04ffb
                text: Application bot
            type: object
        required:
        - appNameField
    code: |
      exports.handler = async (inputs) => {
        const appNameField = inputs.appNameField;
        const appDropdownId = appNameField.value[0];
        return {
          applicationName: appNameField.options.find(option => option.id === appDropdownId).text
        };
      }
    props:
      appNameField: ${inputs.data.fields[1]}
  get-application-config-from-name:
    description: This step involves retrieving the configuration of a specified application using the application's name.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { applicationName, applicationConfig } = inputs;

        const appConfig = Object.entries(applicationConfig)
          .find(([id, config]) => config.appName === applicationName)?.[1];
        if (!appConfig) {
          throw new Error(`No configuration found for applicationName ${applicationName}`);
        }
        return {
          appConfig,
        };
      };
    props:
      applicationName: ${extract-application-name-from-event.applicationName}
      applicationConfig: ${inputs.applicationConfig}
  find-in-airtable:
    description: This step fetches data from an Airtable using a specific URL and authorization, filtering for records that are not disabled and have an email that matches the one extracted from the event.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://api.airtable.com/v0/${get-application-config-from-name.appConfig.peopleTableId}?filterByFormula=AND(NOT(disabled),{email}="${extract-data-from-event.email}")
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
  get-deployment-triggers:
    description: This step involves retrieving deployment triggers from a specific URL, using a GET method with authorization, where the data is filtered based on the name being equal to the extracted email from the event.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: ${meta.apiUrl}/deployment/${get-application-config-from-name.appConfig.deploymentId}/trigger
      method: GET
      headers:
        Authorization: Bearer ${secrets.EDURATA_API_KEY}
      data:
        name:
          eq: ${extract-data-from-event.email}
  delete-trigger:
    description: This step involves deleting a specific trigger from a deployment using a DELETE request, authorized by a Bearer token.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: ${meta.apiUrl}/deployment/${get-application-config-from-name.appConfig.deploymentId}/trigger/${get-deployment-triggers.response.data.items[0].id}
      method: DELETE
      headers:
        Authorization: Bearer ${secrets.EDURATA_API_KEY}
  delete-airtable-record:
    description: This step involves deleting a record from Airtable using a DELETE method if the status response from the 'delete-trigger' is 200, indicating a successful operation.
    if:
      ===:
      - ${delete-trigger.response.status}
      - 200
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: DELETE
      url: https://api.airtable.com/v0/${get-application-config-from-name.appConfig.peopleTableId}/${find-in-airtable.response.data.records[0].id}
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
  send-delete-email:
    description: If the deletion of the Airtable record is successful (status 200), an email is sent to the user notifying them that all resources related to their subscription have been deleted and inviting them to start a new subscription if desired.
    if:
      ===:
      - ${delete-airtable-record.response.status}
      - 200
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/send-ses
    props:
      sender: ${get-application-config-from-name.appConfig.senderEmail}
      to: ${extract-data-from-event.email}
      subject: '${get-application-config-from-name.appConfig.appName}: All resources for your subscription were deleted'
      html_body: |
        Hey ${find-in-airtable.response.data.records[0].fields.name}!, <br><br> We have deleted all resources related to your subscription. <br> If you want to start a new subscription visit <a href="${get-application-config-from-name.appConfig.appUrl}">${get-application-config-from-name.appConfig.appName} online</a>. <br> All the best,<br> The Edurata team <br><br>
