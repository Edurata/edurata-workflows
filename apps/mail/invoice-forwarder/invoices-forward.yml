apiRevision: edurata.io/v1
name: invoice-processor
title: Invoice Processor
schedule: "0 9 * * *"
description: |
  Searches through the inbox and saves, tags and forwards invoices. More info on https://contact.edurata.com/accountingbot
interface:
  inputs:
    properties:
      peopleTableId:
        type: string
        description: |
          The base id + table_id from which to take the people
      userEmail:
        type: string
        description: |
          The email address of the user
      config:
        type: object
        description: |
          The configuration of the invoice processor
        properties:
          gdriveFolderName:
            type: string
            description: |
              The Google Drive folder Name to save the invoices to
          forwardEmail:
            type: string
            description: |
              The email address to forward the invoices to
          successTag:
            type: string
            default: "to-datev/processed"
          failTag:
            type: string
            default: "to-datev/failed"
          skipTag:
            type: string
            default: "to-datev/skipped"
          additionalQuery:
            type: string
            description: |
              Additional query to filter the emails
            default: ""
    required:
      - config
      - userEmail
      - peopleTableId
inputs:
  config: ${variables.invoices_forward_config}
  peopleTableId: ${variables.accountingbot_people_table_id}
steps:
  get-people-data:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: 'https://api.airtable.com/v0/${inputs.peopleTableId}?filterByFormula=AND(NOT(disabled),{email}="${inputs.userEmail}")'
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
  merge-config:
    runtime: python3_10
    code: |
      def handler(inputs):
          user_config = inputs["user_config"]
          base_config = inputs["base_config"]
          # merge both together
          merged = {**base_config, **user_config}
          return  {"config": merged}
    props:
      user_config: ${get-people-data.response.data.records[0].fields}
      base_config: ${inputs.config}
  create-labels:
    foreach: 
      - ${merge-config.config.successTag}
      - ${merge-config.config.failTag}
      - ${merge-config.config.skipTag}
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: https://gmail.googleapis.com/gmail/v1/users/me/labels
      method: POST
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      data:
        name: ${each}
  get-label-ids:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: https://gmail.googleapis.com/gmail/v1/users/me/labels
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      __create-labels: ${create-labels}
  transform-tags-to-label-ids:
    runtime: python3_10
    code: |
      def handler(inputs):
          label_ids = {}
          for label in inputs["get-label-ids"]["response"]["data"]["labels"]:
            if label["name"] == inputs["successTag"]:
              label_ids["successTag"] = label["id"]
            elif label["name"] == inputs["failTag"]:
              label_ids["failTag"] = label["id"]
            elif label["name"] == inputs["skipTag"]:
              label_ids["skipTag"] = label["id"]
          return {"label_ids": label_ids}
    props:
      get-label-ids: ${get-label-ids}
      successTag: ${merge-config.config.successTag}
      failTag: ${merge-config.config.failTag}
      skipTag: ${merge-config.config.skipTag}
  # filter people for interval and today's day
  get-new-mails-without-tag:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: https://www.googleapis.com/gmail/v1/users/me/messages
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      params:
        q: "after:2021/01/01 ${merge-config.config.addFilter} -label:${merge-config.config.successTag} -label:${merge-config.config.failTag} -label:${merge-config.config.skipTag} has:attachment filename:pdf" 
        maxResults: 10
      __create-labels: ${create-labels}
  continue-if-new-mails:
    if: ${get-new-mails-without-tag.response.data.resultSizeEstimate} > 0
    runtime: python3_10
    code: |
      def handler(inputs):
          return {"mails": inputs["get-new-mails-without-tag"]["response"]["data"]["messages"]}
    props:
      get-new-mails-without-tag: ${get-new-mails-without-tag}
  get-mails-info:
    foreach: ${continue-if-new-mails.mails}
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: https://gmail.googleapis.com/gmail/v1/users/me/messages/${each.id}
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      params:
        format: "full"
        fields: "id,payload"
  filter-attachments:
    source:
      repoUrl: "https://github.com/Edurata/edurata-workflows.git"
      path: apps/mail/invoice-forwarder/filter-attachments
    props:
      messages: ${get-mails-info[*].response.data}
      # additional_keywords: ${merge-config.config.additionalKeywords}
  download-attachments:
    foreach: ${filter-attachments.filtered_attachments}
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: "https://gmail.googleapis.com/gmail/v1/users/me/messages/${each.message_id}/attachments/${each.attachment_id}"
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
  save-attachments:
    runtime: python3_10
    props:
      attachments_data: ${download-attachments[*].response.data}
    interface:
      inputs:
        properties:
          attachments_data:
            type: array
            items: 
              type: object
              properties:
                attachmentId:
                  type: string
                  description: |
                    The name of the attachment
                data:
                  type: string
            description: |
              The data of the attachments
      outputs:
        properties:
          new_files:
            type: array
            items:
              type: file
              description: |
                The new file name
    code: |
      import base64
      import uuid

      def correct_base64url_padding(data):
          # Add padding if necessary
          padding_needed = 4 - (len(data) % 4)
          if padding_needed and padding_needed < 4:
              data += '=' * padding_needed
          return data

      def handler(inputs):
          new_files = []
          for attachment_data in inputs["attachments_data"]:
              try:
                  # Correct the base64url padding
                  corrected_data = correct_base64url_padding(attachment_data["data"])
                  random_id = str(uuid.uuid4())
                  new_file = f"/tmp/{random_id}.pdf"
                  with open(new_file, "wb") as f:
                      f.write(base64.urlsafe_b64decode(corrected_data))
                  new_files.append(new_file)
              except (base64.binascii.Error, IOError) as e:
                  print(f"Error processing attachment: {e}")
                  # Handle the error as needed, e.g., skip the file or return an error response
          return {"new_files": new_files}
  forward-pdf:
    description: |
      Forward the PDF attachments to the specified email address using Gmail API.
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      method: POST
      url: "https://gmail.googleapis.com/gmail/v1/users/me/messages/send"
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      data:
        raw: ${encode_email_attachments.raw}
  # Inline step to encode the email with attachment in base64 format
  encode_email_attachments:
    if: ('${merge-config.config.forwardEmail}').length > 0
    else: success
    runtime: python3_10
    interface:
      inputs:
        properties:
          forwardEmail:
            type: string
            description: The email address to forward the attachments to
          attachments:
            type: array
            items:
              type: file
            description: A list of paths to the attachment files
      outputs:
        properties:
          raw:
            type: string
            description: The base64 encoded email message with multiple attachments
    code: |
      import base64
      import email
      from email.mime.multipart import MIMEMultipart
      from email.mime.text import MIMEText
      from email.mime.base import MIMEBase
      from email import encoders
      import os

      def handler(inputs):
          sender = inputs["userEmail"]
          to = inputs["forwardEmail"]
          subject = "Invoice"
          body = "Please find the attached invoices."

          # Create email message
          msg = MIMEMultipart()
          msg['From'] = sender
          msg['To'] = to
          msg['Subject'] = subject
          msg.attach(MIMEText(body, 'plain'))

          # Iterate over attachments and encode each one
          for attachment_path in inputs["attachments"]:
              attachment_name = os.path.basename(attachment_path)
              
              with open(attachment_path, "rb") as attachment_file:
                  part = MIMEBase('application', 'octet-stream')
                  part.set_payload(attachment_file.read())
                  encoders.encode_base64(part)
                  part.add_header('Content-Disposition', f"attachment; filename= {attachment_name}")
                  msg.attach(part)

          # Encode the message in base64 and prepare it for Gmail API
          raw_message = base64.urlsafe_b64encode(msg.as_bytes()).decode()
          return {"raw": raw_message}
    props:
      userEmail: ${inputs.userEmail}
      forwardEmail: ${merge-config.config.forwardEmail}
      attachments: ${save-attachments.new_files}
  # forward-pdf:
  #   foreach: ${save-attachments.new_files}
  #   if: ('${merge-config.config.forwardEmail}').length > 0
  #   description: |
  #     Forward the PDF attachments to the specified email address
  #   source:
  #     repoUrl: "https://github.com/Edurata/edurata-functions.git"
  #     path: etl/load/send-ses
  #   props:
  #     sender: accountingbot@edurata.com
  #     to: ${merge-config.config.forwardEmail}
  #     subject: "Invoice"
  #     html_body: "Please find the attached invoice"
  #     attachments: 
  #       - ${each}
  #     AWS_REGION: "eu-central-1"
  #     AWS_ACCESS_KEY_ID: ${secrets.SHORT_STORY_KEY}
  #     AWS_SECRET_ACCESS_KEY: ${secrets.SHORT_STORY_SECRET}
  get-folder-id:
    runtime: python3_10
    if: ('${merge-config.config.gdriveFolderName}').length > 0
    code: |
      import datetime
      def handler(inputs):
          # today date like 2021-01-01
          today = datetime.datetime.now().strftime("%Y-%m-%d")
          return {"folder_name": today}
  create-folderpath:
    if: ${filter-attachments.filtered_attachments}.length > 0
    description: |
      Create the folder path like invoices/2021-01-01 in Google Drive
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: etl/load/create-gdrive-folderpath
    props:
      OAUTH_TOKEN: ${secrets.GMAIL_API_KEY}
      folder_path: ${merge-config.config.gdriveFolderName}/${get-folder-id.folder_name}
  get-parent-folder-id:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      method: GET
      url: "https://www.googleapis.com/drive/v3/files"
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      params:
        q: name='${get-folder-id.folder_name}' and mimeType='application/vnd.google-apps.folder'
      __create-folderpath: ${create-folderpath}
  upload-files-in-gdrive:
    foreach: ${save-attachments.new_files}
    description: |
      Archive the PDF attachments in the specified Google Drive folder
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: clients/gdrive
    props:
      OAUTH_TOKEN: ${secrets.GMAIL_API_KEY}
      action: "upload"
      upload_file_name: "${filter-attachments.filtered_attachments[each.index].attachment_id}"
      parent_folder_id: "${get-parent-folder-id.response.data.files[0].id}"
      file_path: "${each}"
  map-tags-to-threads:
    runtime: python3_10
    code: |
      def handler(inputs):
          thread_to_tags = {}
          for message in inputs["all_messages"]:
              thread_id = message["threadId"]

              # continue if already processed
              if thread_id in thread_to_tags:
                  continue

              is_in_filtered_attachments = False
              for attachment in inputs["filtered_attachments"]:
                  if attachment["message_id"] == message["id"]:
                      is_in_filtered_attachments = True
                      break
              thread_to_tags[thread_id] = inputs["successTag"] if is_in_filtered_attachments else inputs["skipTag"]
          
          # make into list of objects
          return [{"threadId": thread_id, "tag": tag} for thread_id, tag in thread_to_tags.items()]
    props:
      all_messages: ${get-new-mails-without-tag.response.data.messages}
      filtered_attachments: ${filter-attachments.filtered_attachments} 
      successTag: ${transform-tags-to-label-ids.label_ids.successTag}
      failTag: ${transform-tags-to-label-ids.label_ids.failTag}
      skipTag: ${transform-tags-to-label-ids.label_ids.skipTag}
  tag-emails:
    foreach: ${map-tags-to-threads}
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      method: POST
      url: "https://gmail.googleapis.com/gmail/v1/users/me/threads/${each.threadId}/modify"
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      data:
        addLabelIds: 
          - ${each.tag}
        removeLabelIds: []
