apiRevision: edurata.io/workflow/v1
name: setup-microapp-user
title: Setup Bot
description: The process starts by extracting data and the application ID from an event. The application configuration and schedule rate are then retrieved using the application ID. A new environment is created and its details are obtained using an authorization token. A trigger is created via a POST request. Finally, an email is sent to the user either notifying them of the completed bot setup or requesting OAuth authorization, depending on the application configuration.
interface:
  inputs:
    properties:
      data:
        description: |
          The data from the webhook.
        type: object
        properties:
          fields:
            type: array
            items:
              type: object
              properties:
                label:
                  type: string
                value:
                  type: string
      applicationConfig:
        type: object
        description: |
          A mapping of applicationId to appName, oauthPurposeDescription, oauthSecretName, senderEmail, and deploymentRepoPath.
        additionalProperties:
          appName:
            type: string
          oauthPurposeDescription:
            type: string
          oauthSecretName:
            type: string
          senderEmail:
            type: string
          deploymentRepoPath:
            type: string
    required:
    - data
    - applicationConfig
inputs:
  applicationConfig: ${variables.applicationConfig}
steps:
  extract-data-from-event:
    description: This step involves extracting data from a specific event using the provided input data.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { data } = inputs;
        const nameField = data.fields[0]
        const emailField = data.fields[1]
        const uriEncodedId = encodeURIComponent(emailField.value);
        return {
          email: emailField.value,
          name: nameField.value,
          uriEncodedId,
        };
      }
    props:
      data: ${inputs.data}
  extract-application-id-from-event:
    description: This step involves extracting the application ID from event data.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
          const fields = inputs.fields;
          const applicationIdField = fields.find(field => field.label === "applicationId");
          if (!applicationIdField) {
              throw new Error("Field with label 'applicationId' not found.");
          }
          return {
              applicationId: applicationIdField.value
          };
      };
    props:
      fields: ${inputs.data.fields}
  get-application-config-from-name:
    description: This step involves retrieving the application configuration using the application ID extracted from the event.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { applicationId, applicationConfig } = inputs;
        const appConfig = applicationConfig[applicationId];
        if (!appConfig) {
          throw new Error(`No configuration found for applicationName ${applicationId}`);
        }
        return {
          appConfig,
        };
      };
    props:
      applicationId: ${extract-application-id-from-event.applicationId}
      applicationConfig: ${inputs.applicationConfig}
  create-environment:
    description: This step creates a new environment by making a POST request to the specified URL, using the name extracted from the event email as data, and authenticating with a given API key.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: ${meta.apiUrl}/environment
      method: POST
      headers:
        Authorization: Bearer ${secrets.EDURATA_API_KEY}
      data:
        name: ${extract-data-from-event.email}
  get-environment:
    description: This step retrieves the environment details associated with a specific email from a given API endpoint, using an authorization token.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: ${meta.apiUrl}/environment/byname/${extract-data-from-event.email}
      method: GET
      headers:
        Authorization: Bearer ${secrets.EDURATA_API_KEY}
      __create-environment: ${create-environment}
  get-schedule:
    description: This step retrieves the normal schedule rate from the application configuration.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
          const scheduleRate = inputs.scheduleRate;
          let schedule;
          if (scheduleRate === 'hourly') {
              const minute = Math.floor(Math.random() * 60);
              schedule = `${minute} * * * *`;
          } else if (scheduleRate === 'daily') {
              const hour = Math.floor(Math.random() * 24);
              const minute = Math.floor(Math.random() * 60);
              schedule = `${minute} ${hour} * * *`;
          } else if (scheduleRate === 'never') {
              schedule = null;
          } else {
              throw new Error(`Invalid scheduleRate: ${scheduleRate}`);
          }
          return {
              schedule,
          };
      };
    props:
      scheduleRate: ${get-application-config-from-name.appConfig.normalScheduleRate}
  translate-schedule-to-readable:
    description: This step involves translating the retrieved schedule into a readable format.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { schedule } = inputs;
        const [minute, hour] = schedule.split(' ');
        let readableSchedule = hour === '*' ? `every hour at minute ${minute}` : `every day at ${hour}:${minute}`;
        return {
          readableSchedule,
        };
      };
    props:
      schedule: ${get-schedule.schedule}
  create-trigger:
    description: This step involves creating a trigger by sending a POST request to a specific URL with certain headers and data, which includes the name, environment ID, variables, and schedule.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: ${meta.apiUrl}/deployment/${get-application-config-from-name.appConfig.deploymentId}/trigger
      method: POST
      headers:
        Authorization: Bearer ${secrets.EDURATA_API_KEY}
      data:
        name: ${extract-data-from-event.email}
        environmentId: ${get-environment.response.data.id}
        variables:
          userEmail: ${extract-data-from-event.email}
        schedule: ${get-schedule.schedule}
  send-finished-email:
    description: This step sends an email to the user notifying them that their bot setup is complete, providing a schedule for the bot's operation and links to update or delete their configuration, only if the application configuration does not have an 'oauthSecretName'.
    if:
      '!':
        '!!': ${get-application-config-from-name.appConfig.oauthSecretName?}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/send-ses
    props:
      sender: ${get-application-config-from-name.appConfig.senderEmail}
      to: ${extract-data-from-event.email}
      subject: '${get-application-config-from-name.appConfig.appName}: Setup complete'
      html_body: |
        Hey ${extract-data-from-event.name}!, <br><br> Your bot is ready to go and will run ${translate-schedule-to-readable.readableSchedule}.
        If you want to update your configuration, click <a href="https://tally.so/r/m6RKrB">here</a>. <br> If you want to delete your configuration, click <a href="https://tally.so/r/3lLdzX">here</a>. Best wishes, Edurata Team <br><br>
      AWS_ACCESS_KEY_ID: ${secrets.SHORT_STORY_KEY}
      AWS_SECRET_ACCESS_KEY: ${secrets.SHORT_STORY_SECRET}
  send-oauth-email:
    description: This step sends an OAuth authorization email to the user, asking for necessary permissions, if the OAuth secret name is present in the application configuration.
    if:
      '!!': ${get-application-config-from-name.appConfig.oauthSecretName?}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/send-ses
    props:
      __create-environment: ${create-environment}
      __create-trigger: ${create-trigger}
      sender: ${get-application-config-from-name.appConfig.senderEmail}
      to: ${extract-data-from-event.email}
      subject: '${get-application-config-from-name.appConfig.appName}: Authorization needed'
      html_body: |
        Hey ${extract-data-from-event.name}!, <br><br> The setup is almost complete. We still need OAuth permissions to ${get-application-config-from-name.appConfig.oauthPurposeDescription?}. Please click <a href="${meta.apiUrl}/oauth/google?s=${get-application-config-from-name.appConfig.oauthSecretName?}&u=${meta.userId}&e=${extract-data-from-event.uriEncodedId}">here</a> to authorize us. You will be redirected to a page where you can authorize the third-party app.
        Best wishes, Edurata Team <br><br>
      AWS_ACCESS_KEY_ID: ${secrets.SHORT_STORY_KEY}
      AWS_SECRET_ACCESS_KEY: ${secrets.SHORT_STORY_SECRET}
