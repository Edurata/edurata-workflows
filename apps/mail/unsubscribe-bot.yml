name: email-unsubscribe-service
apiRevision: edurata.io/workflow/v1
description: |
  Automates the process of identifying and consolidating unsubscribe links from recent emails. 
  The workflow retrieves customer details, scans the last three months of emails, extracts unsubscribe links, 
  consolidates them into a single list, and generates an email containing these links for easy access.
interface:
  inputs:
    type: object
    properties:
      userEmail:
        type: string
        description: "Email account to scan"
    required:
      - userEmail
  outputs:
    type: object
    properties:
      email_sent:
        type: boolean
        description: "Indicates if the summary email was successfully sent"
inputs:
  customerTableId: ${variables.applicationConfig.unsubscribeBot.peopleTableId}
steps:
  get-customer-details:
    description: |
      Retrieves customer details, including email and CV, from the Airtable database using the provided user email.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.customerTableId}"
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
      params:
        filterByFormula: "email = '${inputs.userEmail}'"
  get-recent-emails:
    description: |
      Fetches all emails received in the past three months from the user's Gmail account.
      The emails are retrieved using the Gmail API and filtered based on the timestamp.
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: https://www.googleapis.com/gmail/v1/users/me/messages
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      params:
        q: "after:3m ${inputs.email_query}"
        maxResults: 100
  extract-unsubscribe-links:
    foreach: ${get-recent-emails.messages}
    description: |
      Scans the body of each retrieved email for unsubscribe links and extracts them.
      If multiple unsubscribe links are found in an email, they are all collected.
    runtime: python3_10
    code: |
      import re
      
      def handler(inputs):
          email_body = inputs["email_body"]
          unsubscribe_links = re.findall(r'<a[^>]+href="([^"]+)"[^>]*>Unsubscribe</a>', email_body, re.IGNORECASE)
          return {"unsubscribe_links": unsubscribe_links}
    interface:
      inputs:
        email_body:
          type: string
          description: "HTML body of the email"
      outputs:
        unsubscribe_links:
          type: array
          items:
            type: string
            description: "List of unsubscribe links found in the email"
  collect-all-links:
    description: |
      Aggregates all unsubscribe links extracted from multiple emails and removes duplicates.
    runtime: python3_10
    code: |
      def handler(inputs):
          all_links = []
          for email in inputs["emails"]:
              all_links.extend(email["unsubscribe_links"])
          unique_links = list(set(all_links))  # Remove duplicates
          return {"all_unsubscribe_links": unique_links}
    interface:
      inputs:
        emails:
          type: array
          items:
            type: object
            properties:
              unsubscribe_links:
                type: array
                items:
                  type: string
      outputs:
        all_unsubscribe_links:
          type: array
          items:
            type: string
  generate-html-body:
    description: |
      Creates an HTML-formatted email body containing all extracted unsubscribe links, 
      making it easy for the user to review and unsubscribe from unwanted services.
    runtime: python3_10
    code: |
      def handler(inputs):
          links = inputs["all_unsubscribe_links"]
          html_body = "<p>Here are all the unsubscribe links found in your emails from the past 3 months:</p><ul>"
          for link in links:
              html_body += f'<li><a href="{link}">{link}</a></li>'
          html_body += "</ul>"
          return {"html_body": html_body}
    interface:
      inputs:
        all_unsubscribe_links:
          type: array
          items:
            type: string
      outputs:
        html_body:
          type: string
          description: "HTML body with unsubscribe links"
