apiRevision: edurata.io/v1
name: setup-microapp-user
title: Setup Bot
description: |
  Setup a bot that uses OAuth after a webhook call from Tally. The first two fields in Tally must be name and email. 
  The fields except data should be filled on deployment as variables or in the webhook.
interface:
  inputs:
    properties:
      data:
        description: |
          The data from the webhook.
        type: object
        properties:
          fields:
            type: array
            items:
              type: object
              properties:
                label:
                  type: string
                value:
                  type: string
      applicationConfig:
        type: object
        description: |
          A mapping of applicationId to appName, oauthPurposeDescription, oauthSecretName, senderEmail, and deploymentRepoPath.
        additionalProperties:
          appName:
            type: string
          oauthPurposeDescription:
            type: string
          oauthSecretName:
            type: string
          senderEmail:
            type: string
          deploymentRepoPath:
            type: string
    required:
      - data
      - applicationConfig
inputs:
  applicationConfig: ${variables.applicationConfig}
steps:
  extract-data-from-event:
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { data } = inputs;
        const nameField = data.fields[0]
        const emailField = data.fields[1]
        const uriEncodedId = encodeURIComponent(emailField.value);
        return {
          email: emailField.value,
          name: nameField.value,
          uriEncodedId,
        };
      }
    props:
      data: ${inputs.data}
  extract-application-id-from-event:
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
          const fields = inputs.fields;

          // Find the field with the label "applicationId"
          const applicationIdField = fields.find(field => field.label === "applicationId");

          if (!applicationIdField) {
              throw new Error("Field with label 'applicationId' not found.");
          }

          // Extract the applicationId directly as a string
          const applicationId = applicationIdField.value;

          return {
              applicationId: applicationId
          };
      };
    props:
      fields: ${inputs.data.fields}
  get-application-config-from-name:
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { applicationId, applicationConfig } = inputs;

        const appConfig = applicationConfig[applicationId];

        // Throw an error if no configuration is found
        if (!appConfig) {
          throw new Error(`No configuration found for applicationName ${applicationName}`);
        }

        // Return the found configuration
        return {
          appConfig,
        };
      };
    props:
      applicationId: ${extract-application-id-from-event.applicationId}
      applicationConfig: ${inputs.applicationConfig}
  create-environment:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/environment
      method: POST
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      data:
        name: "${extract-data-from-event.email}"
  get-environment:
    description: Get the environment details for the user again in case it was created before.
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/environment/byname/${extract-data-from-event.email}
      method: GET
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      __create-environment: ${create-environment}
  get-schedule:
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
          const scheduleRate = inputs.scheduleRate;

          let schedule;

          if (scheduleRate === 'hourly') {
              // Every hour at a random minute
              const minute = Math.floor(Math.random() * 60);
              schedule = `${minute} * * * *`;
          } else if (scheduleRate === 'daily') {
              // Generate daily schedule at a random hour and minute
              const hour = Math.floor(Math.random() * 24);
              const minute = Math.floor(Math.random() * 60);
              schedule = `${minute} ${hour} * * *`;
          } else if (scheduleRate === 'never') {
              // Special cron expression for "never" (non-functional schedule)
              schedule = null; // or an empty string, depending on your system's requirements
          } else {
              throw new Error(`Invalid scheduleRate: ${scheduleRate}. Expected 'hourly', 'daily', or 'never'.`);
          }

          return {
              schedule,
          };
      };
    props:
      scheduleRate: ${get-application-config-from-name.appConfig.normalScheduleRate}
  translate-schedule-to-readable:
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { schedule } = inputs;
        const [minute, hour] = schedule.split(' ');

        let readableSchedule;
        if (hour === '*') {
          readableSchedule = `every hour at minute ${minute}`;
        } else {
          readableSchedule = `every day at ${hour}:${minute}`;
        }

        return {
          readableSchedule,
        };
      };
    props:
      schedule: ${get-schedule.schedule}
  create-trigger:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/deployments/{get-application-config-from-name.appConfig.deploymentId}/trigger
      method: POST
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      data:
        name: "${extract-data-from-event.email}"
        environmentId: ${create-environment.response.data.id}
        variables: "{\"userEmail\": \"${extract-data-from-event.email}\"}"
        schedule: ${get-schedule.schedule}
  send-finished-email:
    if: "!(${get-application-config-from-name.appConfig.oauthSecretName?})"
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: etl/load/send-ses
    props:
      sender: ${get-application-config-from-name.appConfig.senderEmail}
      to: ${extract-data-from-event.email}
      subject: "${get-application-config-from-name.appConfig.appName}: Setup complete"
      
      # To update your configuration click <a href="${variables.updateTallyUrl}">here</a>.
      # To delete your configuration click <a href="${variables.deleteTallyUrl}">here</a>.
      html_body: >
        Hey ${extract-data-from-event.name}!,
        <br><br>
        Your bot is ready to go and will run ${translate-schedule-to-readable.readableSchedule}.

        Best wishes,
        Edurata Team
        <br><br>
      AWS_ACCESS_KEY_ID: ${secrets.SHORT_STORY_KEY}
      AWS_SECRET_ACCESS_KEY: ${secrets.SHORT_STORY_SECRET}
  send-oauth-email:
    if: ${get-application-config-from-name.appConfig.oauthSecretName?}
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: etl/load/send-ses
    props:
      __create-environment: ${create-environment}
      __create-trigger: ${create-trigger}
      sender: ${get-application-config-from-name.appConfig.senderEmail}
      to: ${extract-data-from-event.email}
      subject: "${get-application-config-from-name.appConfig.appName}: Authorization needed"
      html_body: >
        Hey ${extract-data-from-event.name}!,
        <br><br>
        The setup is almost complete.
        We still need OAuth permissions to ${get-application-config-from-name.appConfig.oauthPurposeDescription}. Please click <a href="${meta.apiUrl}/oauth/google?s=${get-application-config-from-name.appConfig.oauthSecretName}&u=${meta.userId}&e=${extract-data-from-event.uriEncodedEmail}">here</a> to authorize us.
        You will be redirected to a page where you can authorize the third-party app.

        Best wishes,
        Edurata Team
        <br><br>
      AWS_ACCESS_KEY_ID: ${secrets.SHORT_STORY_KEY}
      AWS_SECRET_ACCESS_KEY: ${secrets.SHORT_STORY_SECRET}
