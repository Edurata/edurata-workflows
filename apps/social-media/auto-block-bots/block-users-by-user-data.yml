apiRevision: edurata.io/workflow/v1
name: block-x-bots-by-archive
title: null
schedule: 0 8 * * *
description: The process begins by retrieving a Twitter user's ID and checking their follower count through GET requests to the Twitter API. If the follower count exceeds a limit, the process is cancelled. If not, the latest 100 followers of the user are fetched, including their join date and public metrics. Using a specific algorithm, bots are identified from these new followers and are blocked via a POST request to the Twitter API. Finally, an email is sent as part of the workflow automation process.
interface:
  inputs:
    properties:
      user_handle:
        type: string
        description: |
          The user id of the account to check followers for
      interval:
        type: number
        description: |
          How old the tweets should be in days before deleting
steps:
  get-user-id:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://api.twitter.com/2/users/by/username/${inputs.user_handle}
      headers:
        Authorization: Bearer ${secrets.TWITTER_API_BEARER_TOKEN}
    description: This step retrieves the user ID of a specified Twitter user by making a GET request to the Twitter API, using a provided user handle and an authorization token.
  check-follower-count:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://api.twitter.com/2/users/${get-user-id.response.data.data.id}?user.fields=public_metrics
      headers:
        Authorization: Bearer ${secrets.TWITTER_API_BEARER_TOKEN}
    description: This step performs a GET request to the Twitter API to check the follower count of a specific user using their user ID and the authorization bearer token.
  cancel-if-too-many-followers:
    code: |
      def handler(inputs):
        follower_count = inputs['follower_count']
        if follower_count > 1000:
            raise Exception("Too many followers")
        return {
            cancel: False
        }
    props:
      follower_count: ${check-follower-count.response.data.data.public_metrics.followers_count}
    description: This step involves cancelling the process if the follower count, obtained from the response data of the 'check-follower-count' step, exceeds a certain limit.
    interface:
      inputs:
        properties:
          follower_count:
            type: integer
            description: The number of followers
        required:
        - follower_count
      outputs:
        properties:
          status:
            type: string
            description: The status of the follower count check
          message:
            type: string
            description: The message describing the status
  get-new-followers:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://api.twitter.com/2/users/${get-user-id.response.data.data.id}/followers?max_results=100&user.fields=created_at,public_metrics
      headers:
        Authorization: Bearer ${secrets.TWITTER_API_BEARER_TOKEN}
    description: This step retrieves the most recent 100 followers of a specific user from Twitter's API, including the date they joined Twitter and their public metrics, using a GET method and the user's ID and bearer token for authorization.
  find-bots:
    foreach: ${get-new-followers.response.data.data}
    code: |
      def handler(inputs):
        followers = inputs['followers']
        bot_followers = []
        for user in followers:
            follower_count = user['public_metrics']['followers_count']
            following_count = user['public_metrics']['following_count']
            # check if the follower count is 50x less than the following count
            if follower_count < following_count / 50:
                bot_followers.append(user)
        return {
            bot_followers: bot_followers
        }
    props:
      followers: ${get-new-followers.response.data.data}
    description: This step involves identifying bots from a list of new followers using a specific algorithm or process.
    interface:
      inputs:
        properties:
          followers:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                username:
                  type: string
                is_bot:
                  type: boolean
              required:
              - id
              - username
              - is_bot
        required:
        - followers
      outputs:
        properties:
          bots:
            type: array
            items:
              type: object
              properties:
                id:
                  type: string
                username:
                  type: string
                is_bot:
                  type: boolean
              required:
              - id
              - username
              - is_bot
        required:
        - bots
  block-user:
    foreach: ${find-bots.bot_followers}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: https://api.twitter.com/2/users/${inputs.your_user_id}/blocking
      headers:
        Authorization: Bearer ${secrets.TWITTER_API_BEARER_TOKEN}
      data:
        target_user_id: ${each.id}
    description: This step blocks each user identified as a bot follower on Twitter by sending a POST request to Twitter's API.
  send-email:
    description: This step involves sending an email as part of the workflow automation process.
