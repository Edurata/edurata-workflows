name: wohnungsbot-pitch
apiRevision: edurata.io/workflow/v1
description: The workflow automates the process of identifying and reaching out to flat seekers on WG-Gesucht. It begins by retrieving random credentials which are used to search for users based on specific criteria. Personalized recommendations for each user are then generated, suggesting the use of the "Wohnungsbot" software developed by Julian. Information from user listings and generated recommendations are merged. Finally, the workflow applies to listings on behalf of the users using the provided credentials.
steps:
  get-random-credentials:
    description: This step retrieves random credentials from the secret 'wgGesuchtLogins'.
    runtime: python3_10
    code: |
      import random

      def handler(inputs):
          logins = inputs['wgGesuchtLogins']
          return {'login': random.choice(logins)}
    props:
      wgGesuchtLogins: ${secrets.wgGesuchtLogins}
  search-users:
    description: This step involves searching for users based on certain criteria, such as city_id and max_online_hours, using provided login credentials (WG_USERNAME and WG_PASSWORD).
    source:
      repoUrl: https://github.com/Edurata/edurata-workflows.git
      path: apps/platforms/wohnungsbot/wg-gesucht/pitch-search
    props:
      city_id: 8
      max_online_hours: 80
      WG_USERNAME: ${get-random-credentials.login.wgUsername}
      WG_PASSWORD: ${get-random-credentials.login.wgPassword}
  generate-recommendations:
    foreach: ${search-users.people_listings}
    description: Generate personalized recommendations for each person in the people_listings, suggesting them to use the software "Wohnungsbot" developed by Julian, while also mentioning its AI functionality, full access for testing, and Julian's availability for any queries. The recommendation should be in English if the person's description is in English.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: "Empfehle der folgenden person ${each.name} eine Software zu verwenden, die ich (Julian) entwickelt habe. \nDie Software heißt Wohnungsbot mit der man automatisch bewerbungen auf wohnungsinserate schreiben kann. \nDie Website ist https://apps.edurata.com/de/wohnungsbot \nSchreibe auch dazu, dass die Empfehlung AI generiert ist und der wohnungsbot auch so funktioniert.\nSchreibe auch, dass falls fragen aufkommen, die Person mich gerne fragen kann.\nAußerdem bekommt er die volle Funktionalität, weil der Bot gerade ausprobiert wird. Vermeide Corporate Floskeln. \n\nWenn die Person eine englische Beschreibung hat, schreibe die Empfehlung auf Englisch.\nSteckbrief der Person:\n- Alter der Person: ${each.age}\n- Name: ${each.name}\n- Beschreibung: ${each.description}\n"
      message: Schreibe die Text Nachricht an ${each.name}
  merge-info:
    runtime: python3_10
    description: This step merges information from the 'people_listings' obtained from 'search-users' and the responses generated from 'generate-recommendations'.
    code: |
      def handler(inputs):
          listings = inputs['listings']
          applications = inputs['applications']
          merged_listings = []
          for listing, application in zip(listings, applications):
              merged_listings.append({
                  'listing_url': listing['link'],
                  'recipient_name': listing['name'],
                  'application': application
              })
          return {'merged_listings': merged_listings}
    props:
      listings: ${search-users.people_listings}
      applications: ${generate-recommendations[*].response}
  apply-to-listings:
    description: This step involves applying to listings using the provided 'WG_USERNAME' and 'WG_PASSWORD' from the 'get-random-credentials.login' and the 'application_list' from the 'merge-info.merged_listings'.
    source:
      repoUrl: https://github.com/Edurata/edurata-workflows.git
      path: apps/platforms/wohnungsbot/wg-gesucht/apply
    props:
      WG_USERNAME: ${get-random-credentials.login.wgUsername}
      WG_PASSWORD: ${get-random-credentials.login.wgPassword}
      application_list: ${merge-info.merged_listings}
