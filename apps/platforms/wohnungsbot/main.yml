name: wg-gesucht-application-bot
apiRevision: edurata.io/workflow/v1
description: The workflow automates the process of finding and applying for flat listings. It starts by retrieving customer details from an Airtable database and setting default filters based on the user's details. The workflow then searches for flat listings using these filters and generates personalized application messages for each listing. Information from the flat listings and the generated applications are merged. Finally, the workflow applies to the listings using the customer's credentials, provided there are merged listings available.
interface:
  inputs:
    properties:
      isPro:
        default: false
        type: boolean
        description: |
          If the user is pro subscribed.
      userEmail:
        type: string
        description: The email address of the user of the workflow.
steps:
  get-customer-details:
    description: This step retrieves customer details from an Airtable database using a GET request, filtering by the user's email.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://api.airtable.com/v0/${variables.applicationConfig.wohnungsBot.peopleTableId}
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
      params:
        filterByFormula: email = '${inputs.userEmail}'
  set-defaults-filter:
    runtime: python3_10
    description: This step is setting default filters using the first record's fields from the customer details data and the input of whether the user is a professional or not.
    code: |
      from datetime import datetime, timedelta
      def handler(inputs):
          is_pro = inputs['is_pro']
          search_params = inputs['search_params']
          today_date = datetime.now().strftime('%Y-%m-%d')
          default_filter = {
              'city_name': "Berlin",
              'district_names': [],
              'rent_max': 1000,
              'room_size_min': 10,
              'only_furnished': False,
              'max_online_hours': 1 if is_pro else 24,
              'balcony': False,
              'room_number_min': 1,
              'move_in_earliest': today_date,
              'min_stay_days': 30
          }
          for key, value in default_filter.items():
              if key not in search_params:
                  search_params[key] = value
          return {'filter': search_params}
    props:
      search_params: ${get-customer-details.response.data.records[0].fields}
      is_pro: ${inputs.isPro}
  search-flat-listings:
    description: This step involves searching for flat listings using the filter set in 'set-defaults-filter.filter' and the customer's username and password obtained from 'get-customer-details.response.data.records[0].fields'.
    source:
      repoUrl: https://github.com/Edurata/edurata-workflows.git
      path: apps/platforms/wohnungsbot/wg-gesucht/search
    props:
      filter: ${set-defaults-filter.filter}
      WG_USERNAME: ${get-customer-details.response.data.records[0].fields.wgUsername}
      WG_PASSWORD: ${get-customer-details.response.data.records[0].fields.wgPassword}
  generate-applications:
    foreach: ${search-flat-listings.listings}
    description: This step generates personalized application messages for each flat listing using the title, description, lister's name, and the applicant's details.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: "\"Write a personalized message to apply for the flat listing. \nWrite it in the language of listing description. \nDon't use emoticons.\nIf the name of lister consists of multiple words, use the first word only to make it more personal.\n\nTake the following information into account:\n- Title: ${each.title}\n- Description: ${each.description}\n- Name of lister: ${each.lister_name}\n- About the applicant: ${get-customer-details.response.data.records[0].fields.applicantDescription}\n"
      message: Create the message.
  merge-info:
    runtime: python3_10
    description: This step merges information from the flat listings search and the generated applications responses.
    code: |
      def handler(inputs):
          listings = inputs['listings']
          applications = inputs['applications']
          merged_listings = []
          for listing, application in zip(listings, applications):
              merged_listings.append({
                  'listing_url': listing['link'],
                  'recipient_name': listing['lister_name'],
                  'application': application
              })
          return {'merged_listings': merged_listings}
    props:
      listings: ${search-flat-listings.listings}
      applications: ${generate-applications[*].response}
  apply-to-listings:
    if:
      '!!': ${merge-info.merged_listings}
    description: This step involves applying to listings using the customer's username and password, provided there are merged listings available.
    source:
      repoUrl: https://github.com/Edurata/edurata-workflows.git
      path: apps/platforms/wohnungsbot/wg-gesucht/apply
    props:
      WG_USERNAME: ${get-customer-details.response.data.records[0].fields.wgUsername}
      WG_PASSWORD: ${get-customer-details.response.data.records[0].fields.wgPassword}
      application_list: ${merge-info.merged_listings}
