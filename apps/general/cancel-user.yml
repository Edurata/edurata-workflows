apiRevision: edurata.io/workflow/v1
name: delete-microapp-user
title: Deletes a user from a microapp
description: |
  Automates the process of deleting a user from multiple systems after receiving a webhook call from Tally. The workflow extracts user information from the event data, identifies the associated microapp, retrieves the corresponding application configuration, finds the user in Airtable, deletes deployment triggers, removes the user record from Airtable, and sends a confirmation email upon successful deletion.
interface:
  inputs:
    properties:
      data:
        type: object
        properties:
          fields:
            type: array
            items:
              type: object
              properties:
                label:
                  type: string
                value:
                  type: string
      applicationConfig:
        type: object
        description: |
          A mapping of applicationId to appName, appUrl, senderEmail, and peopleTableId.
        additionalProperties:
          type: object
          properties:
            appName:
              type: string
            appUrl:
              type: string
            senderEmail:
              type: string
            peopleTableId:
              type: string
    required:
      - data
      - applicationConfig
inputs:
  applicationConfig: ${variables.applicationConfig}
steps:
  extract-data-from-event:
    description: |
      Extracts the email of the user from the webhook event data and encodes it for use in API requests.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { data, appName } = inputs;
        const emailField = data.fields[0]
        const uriEncodedId = encodeURIComponent(emailField.value);
        return {
          email: emailField.value,
          uriEncodedId,
        };
      }
    props:
      appName: ${extract-application-name-from-event.applicationName}
      data: ${inputs.data}
  extract-application-name-from-event:
    description: |
      Extracts the selected microapp's name from the webhook event data using the provided dropdown field.
    runtime: nodejs20
    interface:
      inputs:
        properties:
          appNameField:
            example:
              {
                "key": "question_0dDJAA",
                "label": "Which microapp do you want to update?",
                "type": "DROPDOWN",
                "value": [
                  "c426210f-e82e-4259-ac93-f1bf3951da32"
                ],
                "options": [
                  {
                    "id": "c09e221a-dbdb-4c04-a9cb-1b78e72e4a26",
                    "text": "Short story bot"
                  },
                  {
                    "id": "c426210f-e82e-4259-ac93-f1bf3951da32",
                    "text": "Accounting bot"
                  },
                  {
                    "id": "d45666ba-7026-4067-841a-5ba51bb04ffb",
                    "text": "Application bot"
                  }
                ]
              }
            type: object
        required:
          - appNameField
    code: |
      exports.handler = async (inputs) => {
        const appNameField = inputs.appNameField;
        const appDropdownId = appNameField.value[0];
        return {
          applicationName: appNameField.options.find(option => option.id === appDropdownId).text
        };
      }
    props:
      appNameField: ${inputs.data.fields[1]}
  get-application-config-from-name:
    description: |
      Retrieves the application configuration for the selected microapp by matching the application name.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { applicationName, applicationConfig } = inputs;

        const appConfig = Object.entries(applicationConfig)
          .find(([id, config]) => config.appName === applicationName)?.[1];
        if (!appConfig) {
          throw new Error(`No configuration found for applicationName ${applicationName}`);
        }
        return {
          appConfig,
        };
      };
    props:
      applicationName: ${extract-application-name-from-event.applicationName}
      applicationConfig: ${inputs.applicationConfig}
  find-in-airtable:
    description: |
      Searches for the user in Airtable by matching the email and filtering out disabled users.
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: 'https://api.airtable.com/v0/${get-application-config-from-name.appConfig.peopleTableId}?filterByFormula=AND(NOT(disabled),{email}="${extract-data-from-event.email}")'
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
  get-deployment-triggers:
    description: |
      Fetches deployment triggers associated with the user to identify any active deployments.
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/deployment/${get-application-config-from-name.appConfig.deploymentId}/trigger
      method: GET
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      data: 
        name:
          eq: ${extract-data-from-event.email}
  delete-trigger:
    description: |
      Deletes the first deployment trigger found for the user to remove their access.
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/deployment/${get-application-config-from-name.appConfig.deploymentId}/trigger/${get-deployment-triggers.response.data.items[0].id}
      method: DELETE
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
  delete-airtable-record:
    description: |
      If the deployment trigger deletion is successful, deletes the user's record from Airtable.
    if: 
      "===": ["${delete-trigger.response.status}", 200]
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      method: DELETE
      url: https://api.airtable.com/v0/${get-application-config-from-name.appConfig.peopleTableId}/${find-in-airtable.response.data.records[0].id}
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
  send-delete-email:
    description: |
      If the user record deletion is successful, sends a confirmation email notifying them of the removal.
    if: 
      "===": ["${delete-airtable-record.response.status}", 200]
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: etl/load/send-ses
    props:
      sender: ${get-application-config-from-name.appConfig.senderEmail}
      to: ${extract-data-from-event.email}
      subject: "${get-application-config-from-name.appConfig.appName}: All resources for your subscription were deleted"
      html_body: >
        Hey ${find-in-airtable.response.data.records[0].fields.name}!,
        <br><br>
        We have deleted all resources related to your subscription.
        <br>
        If you want to start a new subscription visit <a href="${get-application-config-from-name.appConfig.appUrl}">${get-application-config-from-name.appConfig.appName} online</a>.
        <br>
        All the best,<br>
        The Edurata team
        <br><br>
