name: wg-gesucht-application-bot
apiRevision: edurata.io/workflow/v1
description: |
  Automates the process of scanning WG-Gesucht for new flat listings based on user-defined preferences, generating personalized applications using ChatGPT, and automatically submitting them.
interface:
  inputs:
    properties:
      isPro:
        default: false
        type: boolean
        description: >
          If the user is pro subscribed.
      userEmail:
        type: string
        description: The email address of the user of the workflow.
steps:
  get-customer-details:
    description: Retrieves customer details, including email, CV, and login credentials, from an Airtable database.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${variables.applicationConfig.wohnungsBot.peopleTableId}"
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
      params:
        filterByFormula: "email = '${inputs.userEmail}'"
  set-defaults-filter:
    runtime: python3_10
    description: |
      Sets default values for the search filter, adjusting parameters based on user subscription status.
    code: |
      from datetime import datetime, timedelta
      def handler(inputs):
          is_pro = inputs['is_pro']
          search_params = inputs['search_params']
          today_date = datetime.now().strftime('%Y-%m-%d')
          default_filter = {
              'city_name': "Berlin",
              'district_names': [],
              'rent_max': 1000,
              'room_size_min': 10,
              'only_furnished': False,
              'max_online_hours': 1 if is_pro else 24,
              'balcony': False,
              'room_number_min': 1,
              'move_in_earliest': today_date,
              'min_stay_days': 30
          }
          for key, value in default_filter.items():
              if key not in search_params:
                  search_params[key] = value
          return {'filter': search_params}
    props:
      search_params: ${get-customer-details.response.data.records[0].fields}
      is_pro: ${inputs.isPro}
  search-flat-listings:
    description: |
      Fetches flat listings from WG-Gesucht using the specified search parameters retrieved from the user profile.
    source:
      repoUrl: "https://github.com/Edurata/edurata-workflows.git"
      path: apps/platforms/wohnungsbot/wg-gesucht/search
    props:
      filter: ${set-defaults-filter.filter}
      WG_USERNAME: ${get-customer-details.response.data.records[0].fields.wgUsername}
      WG_PASSWORD: ${get-customer-details.response.data.records[0].fields.wgPassword}
  generate-applications:
    foreach: ${search-flat-listings.listings}
    description: |
      Generates personalized application messages for each flat listing using ChatGPT, ensuring the language matches the listing description and personalizing the message with the lister's name.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        "Write a personalized message to apply for the flat listing. 
        Write it in the language of listing description. 
        Don't use emoticons.
        If the name of lister consists of multiple words, use the first word only to make it more personal.

        Take the following information into account:
        - Title: ${each.title}
        - Description: ${each.description}
        - Name of lister: ${each.lister_name}
        - About the applicant: ${get-customer-details.response.data.records[0].fields.applicantDescription}
      message: "Create the message."
  merge-info:
    runtime: python3_10
    description: |
      Merges the flat listings with the corresponding generated applications to create a structured list of applications ready for submission.
    code: |
      def handler(inputs):
          listings = inputs['listings']
          applications = inputs['applications']
          merged_listings = []
          for listing, application in zip(listings, applications):
              merged_listings.append({
                  'listing_url': listing['link'],
                  'recipient_name': listing['lister_name'],
                  'application': application
              })
          return {'merged_listings': merged_listings}
    props:
      listings: "${search-flat-listings.listings}"
      applications: "${generate-applications[*].response}"
  apply-to-listings:
    if:
      "!!": "${merge-info.merged_listings}"
    description: |
      Automatically submits applications to the selected flat listings on WG-Gesucht using the generated messages and user credentials.
    source:
      repoUrl: "https://github.com/Edurata/edurata-workflows.git"
      path: apps/platforms/wohnungsbot/wg-gesucht/apply
    props:
      WG_USERNAME: ${get-customer-details.response.data.records[0].fields.wgUsername}
      WG_PASSWORD: ${get-customer-details.response.data.records[0].fields.wgPassword}
      application_list: ${merge-info.merged_listings}