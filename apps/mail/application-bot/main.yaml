name: airtable-job-applicator
apiRevision: edurata.io/v1
description: |
  Workflow that scans an Airtable containing job postings in 'rawText', customer emails, and whether the entry is processed.
  It generates personalized job applications for each customer based on their CV and sends the emails using Gmail.
interface:
  inputs:
    type: object
    properties:
      userEmail:
        type: string
        description: The email address of the user of the workflow
      airtableApiKey:
        type: string
      airtableBaseId:
        type: string
      jobTableId:
        type: string
        description: "The table name containing job postings and customer emails."
      customerTableId:
        type: string
        description: "The table name containing customer information (email, CV)."
    required: [airtableApiKey, airtableBaseId, jobTableId, customerTableId]
  outputs:
    type: object
    properties:
      status:
        type: string
        description: "Status of the workflow execution."
inputs:
  airtableApiKey: ${secrets.AIRTABLE_API_KEY}
  airtableBaseId: ${variables.applicationConfig.applicationBot.airtableBaseId}
  jobTableId: ${variables.applicationConfig.applicationBot.jobTableId}
  customerTableId: ${variables.applicationConfig.applicationBot.peopleTableId}
steps:
  get-job-postings:
    description: "Retrieve job postings from Airtable where 'processed' is not true."
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.airtableBaseId}/${inputs.jobTableId}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      params:
        filterByFormula: "AND(NOT({processed}),email='${inputs.userEmail}')"
  get-customer-details:
    description: "Retrieve customer details (email and CV) from the second Airtable table."
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.airtableBaseId}/${inputs.customerTableId}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      params:
        filterByFormula: "email = '${inputs.userEmail}'"
  extract-target-address:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    foreach: "${get-job-postings.response.data.records}"
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        In the following text try to find the email address of the original author of the message.
        Return only the email address. The ${inputs.userEmail} is of the recipient so can't be it.
         Job Posting Details: ${each.fields.rawText} 
      message: Find the address
  generate-email-content:
    description: "Generate a personalized job application email using ChatGPT."
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    foreach: "${get-job-postings.response.data.records}"
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      model: "gpt-4"
      systemMessage: |
        "Using the following CV and job posting information, generate an email highlighting the applicant's skills and 
         qualifications to apply for the job. The email should be professional and tailored to the job description. 
         Only return the completed email without placeholders.
         Job Posting Details: ${each.fields.rawText} 
         Applicant CV: ${get-customer-details.response.data.records[0].fields.CV}."
      message: "Create the email."
  generate-email-subject:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    foreach: "${get-job-postings.response.data.records}"
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        "Using the job posting information, generate an email subject that references the job opening.
         Only return the completed subject.
         Job Posting Details: ${each.fields.rawText} 
      message: "Create the email subject."
  send-email:
    description: "Send the generated email using Gmail API."
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    foreach: "${generate-email-content}"
    props:
      method: POST
      url: "https://gmail.googleapis.com/gmail/v1/users/me/messages/send"
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      data:
        raw: |
          {
            "to": "${extract-target-address[each.index].response}",
            "subject": "${generate-email-subject[each.index].response}",
            "html_body": "${each.response}"
          }
  mark-as-processed:
    description: "Mark the processed records in Airtable to prevent duplicate applications."
    foreach: "${get-job-postings.response.data.records}"
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      method: PATCH
      url: "https://api.airtable.com/v0/${inputs.airtableBaseId}/${inputs.jobTableId}/${each.id}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      data:
        fields:
          processed: true
