name: outreach-bot
apiRevision: edurata.io/workflow/v1
description: |
  Automates the outreach process by fetching filtered leads from Airtable, retrieving email templates from user data,
  generating personalized emails using ChatGPT, sending emails via Gmail, and updating Airtable to track outreach progress.
interface:
  inputs:
    properties:
      airtable_base_id:
        type: string
        description: The Airtable base ID containing leads data and user information.
      leads_table:
        type: string
        description: The name of the Airtable table with lead data.
      user_table:
        type: string
        description: The name of the Airtable table with user data.
      user_email:
        type: string
        description: The email address of the user to retrieve templates.
      gmail_sender_email:
        type: string
        description: The email address of the Gmail account used to send emails.
      days_offset:
        type: integer
        description: The number of days to offset for the last sent date filter.
        default: 3
    required:
      - airtable_base_id
      - leads_table
      - user_table
      - user_email
      - gmail_sender_email
  outputs:
    properties:
      sent_emails:
        type: array
        items:
          type: object
          properties:
            email:
              type: string
            status:
              type: string
              description: Sent status of the email.
outputs:
  sent_emails: ${send-email[*].response.data}
steps:
  fetch-user:
    description: Fetches user data from Airtable using the provided email to retrieve templates for email generation.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.airtable_base_id}/${inputs.user_table}"
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
      params:
        filterByFormula: "email='${inputs.user_email}'"
  fetch-leads:
    description: Fetches lead records from Airtable, filtering by user ID from the fetched user data, and ensuring leads have been contacted fewer times than the set threshold.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.airtable_base_id}/${inputs.leads_table}"
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
      params:
        filterByFormula: "AND(user_id='${fetch-user.response.data.records[0].id}', sent_count < ${inputs.days_offset}, last_sent_date < DATEADD(TODAY(), -2, 'days'))" 
  enrich-leads-with-template:
    runtime: python3_10
    foreach: ${fetch-leads.response.data.records}
    description: Maps the appropriate email template from the fetched user data to each lead based on the lead's sent count.
    code: |
      def handler(inputs):
          user = inputs["user"]
          leads = inputs["leads"]
          template0 = user["fields"]["template_0"]
          template1 = user["fields"]["template_1"]
          template2 = user["fields"]["template_2"]
          for lead in leads:
              if lead["fields"]["sent_count"] == 0:
                  lead["fields"]["template"] = template0
              elif lead["fields"]["sent_count"] == 1:
                  lead["fields"]["template"] = template1
              elif lead["fields"]["sent_count"] == 2:
                  lead["fields"]["template"] = template2
          return leads
    props:
      templates: ${fetch-user.response.data.records[0].fields.templates}
      user: ${fetch-user.response.data.records[0].fields}
  generate-email-content:
    description: Generates a personalized email for each lead using ChatGPT, based on the assigned template and lead details.
    foreach: ${enrich-leads-with-template}
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        Based on the following template and lead details, generate a personalized email.
        Template: ${each.fields.template}
        Lead Details: Name: ${each.fields.name}, Email: ${each.fields.email}, Details: ${each.fields.details}.
        Ensure that the email is polite and adheres to professional communication norms.
        Only return the email content, not the subject.
      message: Generate personalized email content
  send-email:
    foreach: ${enrich-leads-with-template}
    description: Sends the generated email to each lead via Gmail, using the sender email specified in the inputs.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/send-gmail-email
    props:
      threadId: ${each.fields.gmailThreadId}
      userEmail: ${inputs.gmail_sender_email}
      recipient: ${fetch-user.response.data.records[0].fields.email}
      subject: ${fetch-user.response.data.records[0].fields.email_subject}
      body: ${generate-email-content[each.index].response}
  get-update-json:
    foreach: ${send-email}
    description: Prepares a JSON payload for updating the Airtable record with the new thread ID and incremented sent count.
    runtime: python3
    code: |
      def handler(inputs):
          return {
              "fields": {
                  "thread_id": inputs["threadId"],
                  "sent_count": inputs["fields"]["sent_count"] + 1
              }
          }
    props:
      threadId: ${send-email.response.threadId}
  update-airtable:
    foreach: ${send-email}
    description: Updates the Airtable lead record with the incremented sent count and potentially moves the lead to the next email stage.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: PATCH
      url: "https://api.airtable.com/v0/${inputs.airtable_base_id}/${inputs.leads_table}/${enrich-leads-with-template[each.index].id}"
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
      json: ${get-update-json[each.index].response}
