apiRevision: edurata.io/workflow/v1
name: build-function-code
title: Build function code
description: The workflow begins by cloning a Git repository for each function to be built. It then identifies the runtime for the functions using the cloned code. Depending on the runtime, it builds either Node.js 20 or Python 3.10 code. The results of both builds are merged. Finally, for each non-docker runtime, an upload URL is obtained and the zipped code is uploaded to it.
interface:
  inputs:
    properties:
      functionsToBuild:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            source:
              type: object
              properties:
                repoUrl:
                  type: string
                path:
                  type: string
                ref:
                  type: string
    required:
      - functionsToBuild
steps:
  git-clone:
    foreach: ${inputs.functionsToBuild}
    description: This step clones a Git repository from a provided URL to a specified path for each function to be built, using the provided authentication details and reference.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/extract/clone-git
    props:
      repoUrl: ${each.source.repoUrl}
      path: ${each.source.path}
      ref: ${each.source.ref}
      auth: ${each.auth}
  get-runtime:
    runtime: python3_10
    description: This step retrieves the runtime for the functions to be built, using the repository code from the previous git-clone step and the functions specified in the input.
    code: |
      import os

      def load_definition(filepath):
          runtime = ""
          for filename in (".edufc.yaml", ".edufc.yml"):
              definition_path = os.path.join(filepath, filename)
              if os.path.exists(definition_path):
                  with open(definition_path, "r") as file:
                      for line in file:
                          line = line.strip()
                          if line.startswith("runtime:"):
                              runtime = line.split(":", 1)[1].strip("`'\" ").strip()
                              break
                  break
          return runtime

      def handler(event):
          runtime_and_files = []
          for index, filepath in enumerate(event["files"]):
              rest = event["rest"][index]
              print(os.listdir(filepath))
              runtime = load_definition(filepath)
              runtime_and_files.append({"runtime": runtime, "repoCode": filepath, **rest})
          sorted_runtime_and_files = sorted(runtime_and_files, key=lambda x: (x["runtime"] != "python", x["runtime"]))
          return {"runtime_and_files": sorted_runtime_and_files}
    interface:
      inputs:
        type: object
        properties:
          files:
            type: array
            items:
              type: file
      outputs:
        type: object
        properties:
          runtime_and_files:
            type: array
            items:
              type: object
              properties:
                runtime:
                  type: string
                repoCode:
                  type: file
    props:
      files: ${git-clone[*].repoCode}
      rest: ${inputs.functionsToBuild}
  build-nodejs20:
    foreach: ${get-runtime.runtime_and_files}
    if:
      ===:
        - ${each.runtime}
        - nodejs20
    description: This step involves building Node.js 20 by iterating over each runtime and its associated files, only if the runtime equals 'nodejs20', using the respective repository code as a dependency.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: internals/build-nodejs20
    props:
      code: ${each.repoCode}
  build-python3_10:
    foreach: ${get-runtime.runtime_and_files}
    if:
      ===:
        - ${each.runtime}
        - python3_10
    description: This step builds Python 3.10 code for each runtime and file obtained from the 'get-runtime' function, only if the runtime is 'python3_10'.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: internals/build-python3_10
    props:
      code: ${each.repoCode}
  merge-results:
    description: This step involves merging the results from building Node.js 2.0 and Python 3.10..
    runtime: nodejs20
    props:
      results:
        - ${build-nodejs20?}
        - ${build-python3_10?}
    interface:
      inputs:
        type: object
        properties:
          results:
            type: array
            items:
              type: array
              items:
                type: object
                properties:
                  code:
                    type: file
      outputs:
        type: object
        properties:
          results:
            type: array
            items:
              type: object
              properties:
                code:
                  type: file
    code: |
      const handler = async (event) => {
        console.log(event)
        console.log(event.results)
        const { results } = event;
        return {results: results.flat().filter(result => result && !result.__pass__)}
      }
      module.exports = {handler}
  get-upload-url:
    foreach: ${get-runtime.runtime_and_files}
    if:
      "!==":
        - ${each.runtime}
        - docker
    description: This step involves obtaining an upload URL for each runtime that isn't 'docker', by making a request to the specified API endpoint with the necessary authorization token.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: ${meta.apiUrl}/function/${each.name}/upload-url
      headers:
        Authorization: Bearer ${meta.executionToken}
  zip-code:
    foreach: ${merge-results.results}
    if:
      "!==":
        - ${get-runtime.runtime_and_files[each.index].runtime}
        - docker
    description: This step involves processing each result from the merge-results.results operation where the runtime is not 'docker', using the corresponding code file identified by the zip-code step ID.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/zip
    props:
      file: ${each.code}
  upload-code:
    foreach: ${merge-results.results}
    if:
      "!==":
        - ${get-runtime.runtime_and_files[each.index].runtime}
        - docker
    description: This step uploads code by putting data from a zipped file to a specified upload URL, for each result in merge-results, provided that the runtime is not 'docker'.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: PUT
      url: ${get-upload-url[each.index].response.data.uploadUrl}
      dataFromFile: ${zip-code[each.index].zipped}
