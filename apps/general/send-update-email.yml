apiRevision: edurata.io/v1
name: update-microapp-user
title: Update Bot Info
description: |
  Takes an email and applicationId, looks up the corresponding configuration (sender email, subject, peopleTableId), and sends an update link.
interface:
  inputs:
    properties:
      data:
        type: object
        properties:
          fields:
            type: array
            items:
              type: object
              properties:
                label:
                  type: string
                value:
                  type: string
      applicationConfig:
        type: object
        description: |
          A mapping of applicationId to senderEmail, emailSubject, and peopleTableId.
        properties:
          appName:
            type: string
          senderEmail:
            type: string
          emailSubject:
            type: string
          peopleTableId:
            type: string
    required:
      - data
      - applicationConfig
inputs:
  applicationConfig: ${variables.applicationConfig}
steps:
  extract-application-id-and-data-from-event:
    runtime: python3_10
    code: |
      import urllib.parse

      def handler(inputs):
          # Assuming 'inputs["data"]' contains the relevant fields, including the applicationId
          application_id = next((field["value"] for field in inputs["data"] if field["label"] == "applicationId"), None)
          if not application_id:
              raise ValueError("applicationId not found in event payload")

          email = next((field["value"] for field in inputs["data"] if field["label"] == "email"), None)
          if not email:
              raise ValueError("Email not found in event payload")
              
          uri_encoded_email = urllib.parse.quote(email)

          return {
              "applicationId": application_id,
              "email": email,
              "uriEncodedEmail": uri_encoded_email
          }
    props:
      data: ${inputs.data.fields}
  lookup-config-by-application-id:
    runtime: python3_10
    code: |
      def handler(inputs):
          application_id = inputs["applicationId"]
          
          # Look up the configuration for the applicationId
          app_config = inputs["applicationConfig"].get(application_id)
          if not app_config:
              raise ValueError(f"Configuration for applicationId {application_id} not found")
          
          return {
              "appName": app_config["appName"],
              "senderEmail": app_config["senderEmail"],
              "emailSubject": app_config["emailSubject"],
              "peopleTableId": app_config["peopleTableId"]
          }
    props:
      applicationId: ${extract-application-id-and-data-from-event.applicationId}
      applicationConfig: ${inputs.applicationConfig}
  find-in-airtable:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: 'https://api.airtable.com/v0/${lookup-config-by-application-id.peopleTableId}?filterByFormula=AND(NOT(disabled),{email}="${extract-application-id-and-data-from-event.email}")'
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
  send-email:
    if: ${find-in-airtable.response.data.records}.length === 1
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: etl/load/send-ses
    props:
      sender: ${lookup-config-by-application-id.senderEmail}
      to: ${extract-application-id-and-data-from-event.email}
      subject: "${lookup-config-by-application-id.appName}: Update your information"
      html_body: >
        Hey ${find-in-airtable.response.data.records[0].fields.name}!,
        <br><br>
        You requested a link to update your information.
        Please click <a href="${find-in-airtable.response.data.records[0].fields.updateUrl}">here</a> to do this.
        You will be redirected to an Airtable form where you can update your information.

        <br><br>
      AWS_ACCESS_KEY_ID: ${secrets.SHORT_STORY_KEY}
      AWS_SECRET_ACCESS_KEY: ${secrets.SHORT_STORY_SECRET}
