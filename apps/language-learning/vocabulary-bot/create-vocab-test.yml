name: vocabulary-test-generator
apiRevision: edurata.io/workflow/v1
description: The process begins by retrieving rows of vocabulary data from an Airtable. A narrative or story is then generated using this vocabulary data. Following this, a new Google Form is created, which is incorporated into an automated email and sent to the user. Finally, the Airtable is updated for each record that was retrieved in the initial step. This workflow is part of a larger system that automates the extraction of vocabulary and the generation of vocabulary tests.
interface:
  inputs:
    type: object
    properties:
      user_email:
        type: string
        description: The user's email address.
      airtable_api_key:
        type: string
        description: API key to access Airtable.
      airtable_base_id:
        type: string
        description: The Airtable base ID.
      airtable_table_name:
        type: string
        description: The Airtable table name with the vocabulary data.
      google_api_key:
        type: string
        description: API key to access Google Forms.
      google_service_account_json:
        type: file
        description: The Google service account JSON file for authentication.
  required:
  - user_email
  - airtable_api_key
  - airtable_base_id
  - airtable_table_name
  - google_api_key
  - google_service_account_json
outputs:
  type: object
  properties:
    form_url:
      type: string
      description: The Google Form URL created for the test.
    airtable_update_status:
      type: string
      description: The status of updating the Airtable with feedback.
steps:
  retrieve-vocabulary-rows:
    description: This step involves retrieving rows of vocabulary data.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    packages:
      method: GET
      url: https://api.airtable.com/v0/${inputs.airtable_base_id}/${inputs.airtable_table_name}
      headers:
        Authorization: Bearer ${inputs.airtable_api_key}
      params:
        filterByFormula: ({Email} = '${inputs.user_email}')
        maxRecords: 10
  generate-story:
    description: Generate a narrative or story based on the given data or parameters.
    runtime: python3_10
    code: |
      import openai

      def handler(inputs):
          vocab_list = inputs['retrieve-vocabulary-rows']['records']
          vocab_words = [record['fields']['Word'] for record in vocab_list]

          # GPT-4 generation
          story_prompt = f"Write a short story using these words: {', '.join(vocab_words)}."
          response = openai.Completion.create(
              engine="gpt-4",
              prompt=story_prompt,
              max_tokens=500
          )

          story = response.choices[0].text.strip()
          return {
              'short_story': story,
              'vocabulary_words': vocab_words
          }
    packages:
    - openai==0.27.0
    env:
      OPENAI_API_KEY: ${secrets.OPENAI_API_KEY}
    interface:
      inputs:
        properties:
          workflow_id:
            description: The unique identifier of the workflow to be automated
            type: string
          steps:
            description: A list of steps involved in the workflow
            type: array
            items:
              type: object
              properties:
                step_id:
                  description: The unique identifier of the step
                  type: string
                step_name:
                  description: The name of the step
                  type: string
                execution_order:
                  description: The order in which the step is to be executed in the workflow
                  type: integer
                packages:
                  description: The list of step_ids that the current step depends on
                  type: array
                  items:
                    type: string
              required:
              - step_id
              - step_name
              - execution_order
        required:
        - workflow_id
        - steps
      outputs:
        properties:
          workflow_id:
            description: The unique identifier of the automated workflow
            type: string
          status:
            description: The status of the automation process
            type: string
            enum:
            - success
            - failure
          message:
            description: A message detailing the result of the automation process
            type: string
        required:
        - workflow_id
        - status
  create-google-form:
    description: Create a new Google Form.
    runtime: python3_10
    code: |
      from googleapiclient.discovery import build
      from google.oauth2 import service_account

      def handler(inputs):
          service_account_info = inputs["google_service_account_json"]
          vocab_words = inputs['generate-story']['vocabulary_words']
          short_story = inputs['generate-story']['short_story']

          # Set up the Google Forms service
          creds = service_account.Credentials.from_service_account_info(service_account_info)
          form_service = build('forms', 'v1', credentials=creds)

          # Create form
          form_title = "Vocabulary Test"
          form_description = f"Please read the following story and answer the questions. Story: {short_story}"
          form_body = {
              "info": {
                  "title": form_title,
                  "description": form_description
              },
              "items": [
                  {
                      "questionItem": {
                          "question": {
                              "text": f"How is the word '{vocab_words[0]}' used in the story?",
                              "required": True,
                              "choiceQuestion": {
                                  "type": "RADIO",
                                  "options": [{"value": "Correct"}, {"value": "Incorrect"}]
                              }
                          }
                      }
                  }
                  # Repeat for other vocabulary words...
              ]
          }

          # Create form using Google Forms API
          form = form_service.forms().create(body=form_body).execute()
          form_url = form['responderUri']

          return {"form_url": form_url}
    packages:
      google-api-python-client: ''
      google-auth: ''
      google-auth-httplib2: ''
      google-auth-oauthlib: ''
    env:
      GOOGLE_API_KEY: ${inputs.google_api_key}
    interface:
      inputs:
        properties:
          formTitle:
            description: The title of the Google form
            type: string
          questions:
            description: List of questions to be added to the form
            type: array
            items:
              type: object
              properties:
                questionText:
                  description: The text of the question
                  type: string
                questionType:
                  description: The type of the question (e.g., 'multiple choice', 'short answer')
                  type: string
                options:
                  description: List of options for multiple choice questions
                  type: array
                  items:
                    type: string
              required:
              - questionText
              - questionType
        required:
        - formTitle
        - questions
      outputs:
        properties:
          formUrl:
            description: The URL of the created Google form
            type: string
        required:
        - formUrl
  send-form-email:
    description: This step involves sending an automated email containing a form.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/send-email
    packages:
      to: ${inputs.user_email}
      subject: Your Vocabulary Test
      html_body: 'Please complete your vocabulary test by visiting the following link: ${create-google-form.form_url}'
  update-airtable:
    description: This step involves updating Airtable for each record retrieved from the 'retrieve-vocabulary-rows' process.
    foreach: ${retrieve-vocabulary-rows.records}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    packages:
      method: PATCH
      url: https://api.airtable.com/v0/${inputs.airtable_base_id}/${inputs.airtable_table_name}/${each.id}
      headers:
        Authorization: Bearer ${inputs.airtable_api_key}
      body:
        fields:
          UsageFeedback: Used in test
