name: job-applicator
apiRevision: edurata.io/workflow/v1
description: |
  Automates the process of scanning freelance.de for new job postings, filtering them based on user-defined preferences, and automatically applying to relevant jobs by generating personalized email applications.
interface:
  inputs:
    type: object
    properties:
      userEmail:
        type: string
        description: The email address of the user of the workflow
      airtableApiKey:
        type: string
      jobTableId:
        type: string
        description: "The table name containing job postings and customer emails."
      customerTableId:
        type: string
        description: "The table name containing customer information (email, CV)."
    required: [airtableApiKey, jobTableId, customerTableId]
  outputs:
    type: object
    properties:
      status:
        type: string
        description: "Status of the workflow execution."
inputs:
  airtableApiKey: ${secrets.AIRTABLE_API_KEY}
  jobTableId: ${variables.applicationConfig.applicationBot.jobTableId}
  customerTableId: ${variables.applicationConfig.applicationBot.peopleTableId}
  maxElapsedDays: ${variables.applicationConfig.applicationBot.maxElapsedDays}
steps:
  extract-freelancermap-job-postings:
    description: Extract job postings via html parsing and return a list of job postings.
    if: 
      and: 
        - "!!":
            ${get-customer-details.response.data.records[0].fields.freelancermapUser}
        - "!!":
            ${get-customer-details.response.data.records[0].fields.freelancermapPw}
    source:
      repoUrl: https://github.com/Edurata/edurata-workflows.git
      path: apps/platforms/applicationbot/extract-freelancermap-inbox
    props:
      FREELANCERMAP_USERNAME: ${get-customer-details.response.data.records[0].fields.freelancermapUser}
      FREELANCERMAP_PASSWORD: ${get-customer-details.response.data.records[0].fields.freelancermapPw}
      positive_keywords: ${get-customer-details.response.data.records[0].fields.positiveKeywords}
      max_elapsed_days: 1
  extract-freelancede-job-postings:
    if: 
      and: 
        - "!!":
            ${get-customer-details.response.data.records[0].fields.freelancedeUser}
        - "!!":
            ${get-customer-details.response.data.records[0].fields.freelancedePw}
    description: Extract job postings via html parsing and return a list of job postings.
    source:
      repoUrl: https://github.com/Edurata/edurata-workflows.git
      path: apps/platforms/applicationbot/freelance.de
    props:
      FREELANCE_DE_USERNAME: ${get-customer-details.response.data.records[0].fields.freelancedeUser}
      FREELANCE_DE_PASSWORD: ${get-customer-details.response.data.records[0].fields.freelancedePw}
      query_url: ${get-customer-details.response.data.records[0].fields.freelancedeQueryUrl}
  merge-job-postings:
    description: Merges job postings from freelancermap.com and freelance.de into a single list, ensuring uniform structure and adding source links where needed.
    runtime: python3_10
    code: |
        def handler(inputs):
            freelancede_projects = inputs["extract-freelancede-job-postings"] or []
            freelancermap_jobs = inputs["extract-freelancermap-job-postings"] or []
            # put basic link into freelancermap_jobs
            for project in freelancermap_jobs:
                project["link"] = "https://www.freelancermap.com"
            return {
                "projects": freelancermap_jobs + freelancede_projects
            }
    props:
      extract-freelancermap-job-postings: "${extract-freelancermap-job-postings.matching_jobs}"
      extract-freelancede-job-postings: "${extract-freelancede-job-postings.projects}"
  check-if-record-exists:
    foreach: "${merge-job-postings.projects}"
    description: Checks if a job posting already exists in Airtable to prevent duplicate entries.
    if:
      "!":
        "in":
          - "freelancermap"
          - "${each.link}"
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.jobTableId}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      params:
        filterByFormula: "{sourceUrl} = '${each.link}'"
  add-new-jobs-to-airtable:
    description: Adds new job postings to Airtable for tracking and later application.
    foreach: "${merge-job-postings.projects}"
    if: 
      and:
        - "!!": ${get-customer-details.response.data.records[0].fields.freelancedeUser}
        - "!!": ${get-customer-details.response.data.records[0].fields.freelancedePw}
        - "!":
            "!!": ${check-if-record-exists[each.index].response.data.records?}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: "https://api.airtable.com/v0/${inputs.jobTableId}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      data:
        fields:
          raw: "${each.content}"
          userEmail: "${inputs.userEmail}"
          sourceUrl: "${each.link}"
          processed: false
  get-job-postings:
    description: Retrieves job postings from Airtable where the 'processed' field is false, indicating they are yet to be applied to.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      _add-new-jobs-to-airtable: "${add-new-jobs-to-airtable}"
      method: GET
      url: "https://api.airtable.com/v0/${inputs.jobTableId}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      params:
        limit: 100
        filterByFormula: "AND(NOT({processed}),{userEmail}='${inputs.userEmail}')"
  get-customer-details:
    description: Retrieves the user's details, including email and CV, from Airtable for use in job applications.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.customerTableId}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      params:
        filterByFormula: "email = '${inputs.userEmail}'"
  download-CV:
    description: Retrieves the user's CV from the customer table in Airtable and downloads it as a file for further processing
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "${get-customer-details.response.data.records[0].fields.CV[0].url}"
      streamToFile: true
  extract-CV-content:
    description: Extracts the text content from the user's CV for use in generating job applications.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/extract/extract-text
    props:
      input_file: "${download-CV.response.file}"
  extract-target-address:
    description: dentifies and extracts the email address of the original job posting author from the job listing text, ensuring it is not the user's own email.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    foreach: "${get-job-postings.response.data.records}"
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        In the following text try to find the email address of the original author of the message.
        Return only the email address. The ${inputs.userEmail} is of the recipient so can't be it.
         Job Posting Details: ${each.fields.raw} 
      message: Find the address
  generate-email-content:
    description: Uses ChatGPT to create a personalized job application email in HTML format, tailoring it to the job description, the user's CV, and availability.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    foreach: "${get-job-postings.response.data.records}"
    concurrency: 1
    props:
      model: gpt-4o
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        Using the following CV and job posting information, generate an email body in html highlighting my skills and 
        qualifications to apply for the job. The email should be tailored to the job description. It should only include real experience that can be found in the CV.
        Don't use corporate language. maximum 5 sentences. Always mention the hourly rate and availability.
        Generate the response in the language of the listing.

        Mention that it is in response to a job opening on ${each.fields.sourceUrl}.

        In your response don't include markup formatting and return the body directly.
        Only return the email body as the header is done separately.
        As its html, you must use <br> for linebreaks.

        Job Posting Details: ${each.fields.raw} 

        My Hourly rate: ${get-customer-details.response.data.records[0].fields.hourlyRate}.

        My Availability: ${get-customer-details.response.data.records[0].fields.availableFrom}.

        My CV: ${extract-CV-content.extracted_text}.
      message: "Create the email in html and only return the email body without markup formatting."
  generate-email-subject:
    description: Generates a concise, relevant email subject line based on the job posting details, ensuring it matches the language of the listing.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    foreach: "${get-job-postings.response.data.records}"
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        "Using the job posting information, generate an email subject that references the job opening.
         Only return the completed subject in the language of the job posting without formatting and without any additional information.
         Job Posting Details: ${each.fields.raw} 
      message: "Create the email subject and return only text without formatting."
  prepare-gmail-raw:
    description: Constructs a base64-encoded raw email, including the generated content, subject, recipient address, and attached CV, for sending via the Gmail API.
    if:
      "!!": "${extract-target-address[each.index].response}"
    foreach: "${generate-email-content}"
    runtime: python3_10
    interface:
      inputs:
        type: object
        properties:
          html_body:
            type: string
          sender:
            type: string
          to:
            type: string
          subject:
            type: string
          cv_filepath:
            type: file
      outputs:
        type: object
        properties:
          raw:
            type: string
    code: |
      import base64
      import email
      from email.mime.multipart import MIMEMultipart
      from email.mime.text import MIMEText
      from email.mime.base import MIMEBase
      from email import encoders
      import os
      def handler(inputs):
          message = inputs['html_body'].replace('\n', '<br>')
          cv_filepath = inputs['cv_filepath']
          msg = MIMEMultipart()
          msg['From'] = inputs['sender']
          msg['To'] = inputs['to']
          msg['Subject'] = inputs['subject']
          msg.attach(MIMEText(message, 'html'))

          attachment = open(cv_filepath, "rb")
          part = MIMEBase('application', 'octet-stream')
          part.set_payload(attachment.read())
          encoders.encode_base64(part)
          part.add_header('Content-Disposition', f"attachment; filename= {os.path.basename(cv_filepath)}")
          msg.attach(part)

          raw = base64.urlsafe_b64encode(msg.as_bytes()).decode()
          return {'raw': raw}
    props:
      sender: "${inputs.userEmail}"
      # to: "juliandemourgues@edurata.com"
      to: "${extract-target-address[each.index].response}"
      subject: "${generate-email-subject[each.index].response}"
      html_body: "${each.response}"
      cv_filepath: "${download-CV.response.file}"
  send-email:
    description: Sends the prepared job application email using Gmail API, delivering it to the extracted recipient address.
    foreach: "${prepare-gmail-raw}"
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      method: POST
      url: "https://gmail.googleapis.com/gmail/v1/users/me/messages/send"
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      data:
        raw: "${each.raw}"
  mark-as-processed:
    description: Updates the job posting entry in Airtable to mark it as processed, preventing duplicate applications.
    foreach: "${get-job-postings.response.data.records}"
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      _send-email: "${send-email}"
      method: PATCH
      url: "https://api.airtable.com/v0/${inputs.jobTableId}/${each.id}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      data:
        fields:
          processed: true
