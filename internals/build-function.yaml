apiRevision: edurata.io/workflow/v1
description: These steps automate the build process for Node.js 2.0 and Python 3.10
  by iterating over each runtime and its associated files. The code used is sourced
  from the 'edurata-functions' GitHub repository. The steps also involve retrieving
  the upload URL for each runtime file, cloning the Git repository for each function
  to be built, and merging the results from the dependencies. Code is uploaded using
  a PUT method for each result in the merged array, with the exception of 'docker'
  runtimes. Zip codes are extracted from each result in the merged array, excluding
  those with the 'docker' runtime.
interface:
  inputs:
    properties:
      functionsToBuild:
        items:
          properties:
            name:
              type: string
            source:
              properties:
                path:
                  type: string
                ref:
                  type: string
                repoUrl:
                  type: string
              type: object
          type: object
        type: array
    required:
    - functionsToBuild
name: build-function-code
steps:
  build-nodejs20:
    description: Automates the build process for Node.js 2.0 by iterating over each
      runtime and its associated files, obtained from the 'get-runtime' step. The
      step specifically targets instances where the runtime equals 'nodejs20'. It
      utilizes the code from the 'edurata-functions' GitHub repository, specifically
      from the 'internals/build-nodejs20' path. The code used in this step is dependent
      on the 'repoCode' output from each repository in the previous step.
    foreach: ${get-runtime.runtime_and_files}
    if:
      ===:
      - ${each.runtime}
      - nodejs20
    props:
      code: ${each.repoCode}
    source:
      path: internals/build-nodejs20
      repoUrl: https://github.com/Edurata/edurata-functions.git
  build-python3_10:
    description: Automates the process of building Python 3.10 by iterating over each
      runtime and file obtained from 'get-runtime.runtime_and_files'. The operation
      is conditioned to only proceed if the runtime equals 'python3_10'. The code
      for the operation is sourced from the 'build-python3_10' path in the 'edurata-functions'
      Git repository. This step depends on the 'repoCode' output from each repository.
    foreach: ${get-runtime.runtime_and_files}
    if:
      ===:
      - ${each.runtime}
      - python3_10
    props:
      code: ${each.repoCode}
    source:
      path: internals/build-python3_10
      repoUrl: https://github.com/Edurata/edurata-functions.git
  get-runtime:
    code: |
      import os

      def load_definition(filepath):
          runtime = ""
          for filename in (".edufc.yaml", ".edufc.yml"):
              definition_path = os.path.join(filepath, filename)
              if os.path.exists(definition_path):
                  with open(definition_path, "r") as file:
                      for line in file:
                          line = line.strip()
                          if line.startswith("runtime:"):
                              runtime = line.split(":", 1)[1].strip("`'\" ").strip()
                              break
                  break
          return runtime

      def handler(event):
          runtime_and_files = []
          for index, filepath in enumerate(event["files"]):
              rest = event["rest"][index]
              print(os.listdir(filepath))
              runtime = load_definition(filepath)
              runtime_and_files.append({"runtime": runtime, "repoCode": filepath, **rest})
          sorted_runtime_and_files = sorted(runtime_and_files, key=lambda x: (x["runtime"] != "python", x["runtime"]))
          return {"runtime_and_files": sorted_runtime_and_files}
    description: This step loads the runtime definition from a specified filepath
      using inline code, with dependencies on the output of 'git-clone' step for the
      repository code files and 'inputs.functionsToBuild' for additional functions
      to build.
    interface:
      inputs:
        properties:
          files:
            items:
              type: file
            type: array
        type: object
      outputs:
        properties:
          runtime_and_files:
            items:
              properties:
                repoCode:
                  type: file
                runtime:
                  type: string
              type: object
            type: array
        type: object
    props:
      files: ${git-clone[*].repoCode}
      rest: ${inputs.functionsToBuild}
    runtime: python3_10
  get-upload-url:
    description: This step retrieves the upload URL for each runtime file excluding
      'docker' from the 'get-runtime.runtime_and_files' list. It sends an authorized
      GET request to the API endpoint constructed with 'meta.executionToken' and 'meta.apiUrl'.
      The request is made using the axios module from the general path in the Edurata
      functions repository.
    foreach: ${get-runtime.runtime_and_files}
    if:
      '!==':
      - ${each.runtime}
      - docker
    props:
      headers:
        Authorization: Bearer ${meta.executionToken}
      url: ${meta.apiUrl}/function/${each.name}/upload-url
    source:
      path: general/axios
      repoUrl: https://github.com/Edurata/edurata-functions.git
  git-clone:
    description: The step clones the Git repository for each function to be built
      as specified in ${inputs.functionsToBuild}. It uses the authorization details
      from ${each.auth}, the path from ${each.source.path}, the reference from ${each.source.ref},
      and the repository URL from ${each.source.repoUrl}. The source code is extracted
      from the path 'etl/extract/clone-git' in the repository 'https://github.com/Edurata/edurata-functions.git'.
    foreach: ${inputs.functionsToBuild}
    props:
      auth: ${each.auth}
      path: ${each.source.path}
      ref: ${each.source.ref}
      repoUrl: ${each.source.repoUrl}
    source:
      path: etl/extract/clone-git
      repoUrl: https://github.com/Edurata/edurata-functions.git
  merge-results:
    code: |
      const handler = async (event) => {
        console.log(event, event.results)
        const { results } = event;
        return {results: results.flat().filter(result => result && !result.__pass__)}
      }
      module.exports = {handler}
    description: Merges the results from the dependencies 'build-nodejs20' and 'build-python3_10'
      using inline code, which flattens the results array and filters out any null
      results or results that have passed.
    interface:
      inputs:
        properties:
          results:
            items:
              items:
                properties:
                  code:
                    type: file
                type: object
              type: array
            type: array
        type: object
      outputs:
        properties:
          results:
            items:
              properties:
                code:
                  type: file
              type: object
            type: array
        type: object
    props:
      results:
      - ${build-nodejs20?}
      - ${build-python3_10?}
    runtime: nodejs20
  upload-code:
    description: This step uploads code using a PUT method through the 'general/axios'
      path from the 'edurata-functions' GitHub repository. It performs this action
      for each result in the 'merge-results.results' array, but only if the runtime
      from 'get-runtime.runtime_and_files' is not 'docker'. The upload uses data from
      'zip-code' and the upload URL from 'get-upload-url'.
    foreach: ${merge-results.results}
    if:
      '!==':
      - ${get-runtime.runtime_and_files[each.index].runtime}
      - docker
    props:
      dataFromFile: ${zip-code[each.index].zipped}
      method: PUT
      url: ${get-upload-url[each.index].response.data.uploadUrl}
    source:
      path: general/axios
      repoUrl: https://github.com/Edurata/edurata-functions.git
  zip-code:
    description: This step extracts zip codes from each result in the 'merge-results.results'
      array, excluding those with the 'docker' runtime. The extraction is performed
      using a script from the 'etl/transform/zip' path in the Edurata functions GitHub
      repository, and it depends on the 'file' prop from the 'each.code' output.
    foreach: ${merge-results.results}
    if:
      '!==':
      - ${get-runtime.runtime_and_files[each.index].runtime}
      - docker
    props:
      file: ${each.code}
    source:
      path: etl/transform/zip
      repoUrl: https://github.com/Edurata/edurata-functions.git
title: Build function code
