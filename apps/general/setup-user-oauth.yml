apiRevision: edurata.io/workflow/v1
name: setup-microapp-user
title: Setup Bot
description: |
  Automates the setup of a bot using OAuth after a webhook call from Tally. The first two fields in Tally must be name and email. The workflow extracts data from the webhook, retrieves application configurations, creates or retrieves an environment, schedules a trigger, and sends an appropriate email based on whether OAuth authorization is required.
interface:
  inputs:
    properties:
      data:
        description: |
          The data from the webhook.
        type: object
        properties:
          fields:
            type: array
            items:
              type: object
              properties:
                label:
                  type: string
                value:
                  type: string
      applicationConfig:
        type: object
        description: |
          A mapping of applicationId to appName, oauthPurposeDescription, oauthSecretName, senderEmail, and deploymentRepoPath.
        additionalProperties:
          appName:
            type: string
          oauthPurposeDescription:
            type: string
          oauthSecretName:
            type: string
          senderEmail:
            type: string
          deploymentRepoPath:
            type: string
    required:
      - data
      - applicationConfig
inputs:
  applicationConfig: ${variables.applicationConfig}
steps:
  extract-data-from-event:
    description: Extracts the name and email from the first two fields of the webhook event and creates a URI-encoded email identifier.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { data } = inputs;
        const nameField = data.fields[0]
        const emailField = data.fields[1]
        const uriEncodedId = encodeURIComponent(emailField.value);
        return {
          email: emailField.value,
          name: nameField.value,
          uriEncodedId,
        };
      }
    props:
      data: ${inputs.data}
  extract-application-id-from-event:
    description: Extracts the applicationId from the webhook event fields.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
          const fields = inputs.fields;
          const applicationIdField = fields.find(field => field.label === "applicationId");
          if (!applicationIdField) {
              throw new Error("Field with label 'applicationId' not found.");
          }
          return {
              applicationId: applicationIdField.value
          };
      };
    props:
      fields: ${inputs.data.fields}
  get-application-config-from-name:
    description: Retrieves the application configuration for the extracted applicationId from the provided configuration mapping.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { applicationId, applicationConfig } = inputs;
        const appConfig = applicationConfig[applicationId];
        if (!appConfig) {
          throw new Error(`No configuration found for applicationName ${applicationId}`);
        }
        return {
          appConfig,
        };
      };
    props:
      applicationId: ${extract-application-id-from-event.applicationId}
      applicationConfig: ${inputs.applicationConfig}
  create-environment:
    description: Creates a new environment for the user based on their email.
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/environment
      method: POST
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      data:
        name: "${extract-data-from-event.email}"
  get-environment:
    description: Retrieves the environment details for the user if it already exists, otherwise references the newly created environment.
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/environment/byname/${extract-data-from-event.email}
      method: GET
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      __create-environment: ${create-environment}
  get-schedule:
    description: Determines the appropriate cron schedule for the bot based on the application's normal schedule rate.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
          const scheduleRate = inputs.scheduleRate;
          let schedule;
          if (scheduleRate === 'hourly') {
              const minute = Math.floor(Math.random() * 60);
              schedule = `${minute} * * * *`;
          } else if (scheduleRate === 'daily') {
              const hour = Math.floor(Math.random() * 24);
              const minute = Math.floor(Math.random() * 60);
              schedule = `${minute} ${hour} * * *`;
          } else if (scheduleRate === 'never') {
              schedule = null;
          } else {
              throw new Error(`Invalid scheduleRate: ${scheduleRate}`);
          }
          return {
              schedule,
          };
      };
    props:
      scheduleRate: ${get-application-config-from-name.appConfig.normalScheduleRate}
  translate-schedule-to-readable:
    description: Converts a cron schedule expression into a human-readable format.
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { schedule } = inputs;
        const [minute, hour] = schedule.split(' ');
        let readableSchedule = hour === '*' ? `every hour at minute ${minute}` : `every day at ${hour}:${minute}`;
        return {
          readableSchedule,
        };
      };
    props:
      schedule: ${get-schedule.schedule}
  create-trigger:
    description: Creates a deployment trigger for the environment using the extracted user email and generated schedule.
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/deployment/${get-application-config-from-name.appConfig.deploymentId}/trigger
      method: POST
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      data:
        name: "${extract-data-from-event.email}"
        environmentId: ${get-environment.response.data.id}
        variables:
          userEmail: "${extract-data-from-event.email}"
        schedule: ${get-schedule.schedule}
  send-finished-email:
    description: Sends a completion email if OAuth is not required.
    if: 
      "!":
        "!!": "${get-application-config-from-name.appConfig.oauthSecretName?}"
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: etl/load/send-ses
    props:
      sender: ${get-application-config-from-name.appConfig.senderEmail}
      to: ${extract-data-from-event.email}
      subject: "${get-application-config-from-name.appConfig.appName}: Setup complete"
      html_body: >
        Hey ${extract-data-from-event.name}!,
        <br><br>
        Your bot is ready to go and will run ${translate-schedule-to-readable.readableSchedule}.

        If you want to update your configuration, click <a href="https://tally.so/r/m6RKrB">here</a>.
        <br>
        If you want to delete your configuration, click <a href="https://tally.so/r/3lLdzX">here</a>.
        Best wishes,
        Edurata Team
        <br><br>
      AWS_ACCESS_KEY_ID: ${secrets.SHORT_STORY_KEY}
      AWS_SECRET_ACCESS_KEY: ${secrets.SHORT_STORY_SECRET}
  send-oauth-email:
    description: Sends an OAuth authorization request email if OAuth is required for the bot setup.
    if: 
      "!!": "${get-application-config-from-name.appConfig.oauthSecretName?}"
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: etl/load/send-ses
    props:
      __create-environment: ${create-environment}
      __create-trigger: ${create-trigger}
      sender: ${get-application-config-from-name.appConfig.senderEmail}
      to: ${extract-data-from-event.email}
      subject: "${get-application-config-from-name.appConfig.appName}: Authorization needed"
      html_body: >
        Hey ${extract-data-from-event.name}!,
        <br><br>
        The setup is almost complete.
        We still need OAuth permissions to ${get-application-config-from-name.appConfig.oauthPurposeDescription?}. Please click <a href="${meta.apiUrl}/oauth/google?s=${get-application-config-from-name.appConfig.oauthSecretName?}&u=${meta.userId}&e=${extract-data-from-event.uriEncodedId}">here</a> to authorize us.
        You will be redirected to a page where you can authorize the third-party app.

        Best wishes,
        Edurata Team
        <br><br>
      AWS_ACCESS_KEY_ID: ${secrets.SHORT_STORY_KEY}
      AWS_SECRET_ACCESS_KEY: ${secrets.SHORT_STORY_SECRET}
