name: airtable-contacted-interest-email
apiRevision: edurata.io/v1
description: |
  Lookup Airtable leads with status "Kontaktiert Interesse", no Email Status, and a decision‑maker name present. For each, generate a personalized email from a template (stored in Google Docs) and send via Gmail API.
interface:
  inputs:
    airtable_base_id:
      type: string
    airtable_table_name:
      type: string
    airtable_api_key_env:
      type: env
    gmail_user_id:
      type: string
    google_docs_template_id:
      type: string
  outputs:
    sent_count:
      type: integer
steps:
  list-leads:
    description: Retrieve matching Airtable records
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.airtable_base_id}/${inputs.airtable_table_name}"
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
      params:
        filterByFormula: "AND({Lead Status} = 'Kontaktiert Interesse', {Email Status} = '', {Name Entscheider} != '')"
      maxResults: 100
  fetch-template:
    description: Get email template content from Google Docs
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://docs.googleapis.com/v1/documents/${inputs.google_docs_template_id}"
      headers:
        Authorization: "Bearer ${secrets.G_DOCS}"
  generate-email:
    foreach: ${list-leads.response.records}
    description: Generate personalized email from template
    interface:
      inputs:
        record:
          type: object
        template: 
          type: object
    runtime: python3_10
    code: |
      import base64
      from string import Template
      def handler(inputs):
          rec = inputs["record"]["fields"]
          tpl = inputs["template"]
          body_plain = tpl["body_plain"]
          body_html = tpl.get("body_html", body_plain)
          subs = {
            "Name": rec.get("Name Entscheider"),
            "Company": rec.get("Company", ""),
            "Email": rec.get("Email")
          }
          txt = Template(body_plain).substitute(subs)
          html = Template(body_html).substitute(subs)
          message = f"From: me\nTo: {subs['Email']}\nSubject: Interesse an Zusammenarbeit\nMIME-Version: 1.0\nContent-Type: multipart/alternative; boundary=BOUNDARY\n\n--BOUNDARY\nContent-Type: text/plain; charset=UTF‑8\n\n{txt}\n\n--BOUNDARY\nContent-Type: text/html; charset=UTF‑8\n\n{html}\n--BOUNDARY--"
          raw = base64.urlsafe_b64encode(message.encode("utf-8")).decode("utf-8")
          return {"handler_raw": raw}
    props:
      record: ${each}
      template: ${fetch-template.response}
  send-email:
    foreach: ${list-leads.response.records}
    description: Generate personalized email and send via Gmail
    if:
      "!!": ${each.fields.Email} 
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: "https://gmail.googleapis.com/gmail/v1/users/${inputs.gmail_user_id}/messages/send"
      headers:
        Authorization: "Bearer ${secrets.G_MAIL}"
        Content-Type: "application/json"
      data:
        raw: "${generate-email[each.index].handler_raw}"
  update-status:
    description: Mark Email Status in Airtable
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: PATCH
      url: "https://api.airtable.com/v0/${inputs.airtable_base_id}/${inputs.airtable_table_name}/${each.id}"
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
        Content-Type: "application/json"
      data:
        fields:
          Email Status: "Sent"
    if:
      "!!": ${send-email}
