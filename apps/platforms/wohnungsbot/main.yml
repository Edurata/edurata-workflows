name: wg-gesucht-application-bot
apiRevision: edurata.io/v1
description: |
  A bot that scans WG-Gesucht for new flat listings and automatically applies to them based on user-defined preferences.
interface:
  inputs:
    properties:
      userEmail:
        type: string
        description: The email address of the user of the workflow.
      customerTableId:
        type: string
        description: The Airtable table containing customer information (email, CV).
      search_params:
        type: object
        description: |
          Parameters for searching flats, such as location, rent range, etc.
        properties:
          city:
            type: string
            description: "The city for the listing search, e.g., 'Berlin' or 'Munich'. Defaults to 'Berlin' if not provided."
          rent_max:
            type: number
            description: "Maximum rent price in EUR."
          room_size_min:
            type: number
            description: "Minimum room size in square meters."
          only_furnished:
            type: boolean
            description: "If true, only furnished rooms are listed."
          max_online_time:
            type: number
            description: "Maximum number of hours since the listing was posted."
          balcony:
            type: boolean
            description: "If true, filters listings that have a balcony."
          move_in_earliest:
            type: string
            description: "Earliest move-in date in YYYY-MM-DD format."
          move_in_latest:
            type: string
            description: "Latest move-in date in YYYY-MM-DD format."
          min_stay_days:
            type: number
            description: "Minimum duration of stay in days."
steps:
  get-customer-details:
    description: "Retrieve customer details (email and CV) from the second Airtable table."
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.customerTableId}"
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
      params:
        filterByFormula: "email = '${inputs.userEmail}'"
  set-defaults-filter:
    runtime: python3_10
    description: |
      Set default values for the search filter.
    code: |
      def handler(inputs):
          search_params = inputs['search_params']
          today_date = datetime.now().strftime('%Y-%m-%d')
          in_three_months = (datetime.now() + timedelta(days=90)).strftime('%Y-%m-%d')
          default_filter = {
              'city': 'Berlin',
              'rent_max': 1000,
              'room_size_min': 10,
              'only_furnished': False,
              'max_online_time': 24,
              'balcony': False,
              'move_in_earliest': today_date,
              'move_in_latest': in_three_months,
              'min_stay_days': 30
          }
          for key, value in default_filter.items():
              if key not in search_params:
                  search_params[key] = value
          return {'filter': search_params}
    props:
      search_params: ${get-customer-details.response.data.records[0].fields}
  search-flat-listings:
    description: |
      Fetch flat listings from WG-Gesucht using the specified search parameters.
    source:
      repoUrl: "https://github.com/Edurata/edurata-workflows.git"
      path: platforms/wohnungsbot/wg-gesucht/search
    props:
      filter: ${set-defaults-filter.filter}
      WG_USERNAME: ${get-customer-details.response.data.records[0].fields.wgUsername}
      WG_PASSWORD: ${get-customer-details.response.data.records[0].fields.wgPassword}
  generate-applications:
    foreach: ${search-flat-listings.listings}
    description: |
      Generate applications for the filtered flat listings with chatgpt
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        "Write a personalized message to apply for the flat listing. Write it in the language of listing description. Also include emoticons. If the name of lister consists of multiple words, use the first word only to make it more personal.

        Take the following information into account:
        - Title: ${each.title}
        - Description: ${each.description}
        - Name of lister: ${each.lister_name}
        - About the applicant: ${get-customer-details.response.data.records[0].fields.applicantDescription}
      message: "Create the message."
  merge-info:
    runtime: python3_10
    description: |
      Merge the flat listings with the generated applications.
    code: |
      def handler(inputs):
          listings = inputs['search-flat-listings.listings']
          applications = inputs['generate-applications']
          merged_listings = []
          for listing, application in zip(listings, applications):
              merged_listings.append({
                  'lister_name': listing['lister_name'],
                  'application': application
              })
          return {'merged_listings': merged_listings}
    props:
      search-flat-listings: "${search-flat-listings.listings}"
      generate-applications: "${generate-applications}"
  apply-to-listings:  
    description: |
      Automatically apply to the filtered flat listings.
    source:
      repoUrl: "https://github.com/Edurata/edurata-workflows.git"
      path: platforms/wohnungsbot/wg-gesucht/search
    props:
      WG_USERNAME: ${get-customer-details.response.data.records[0].fields.wgUsername}
      WG_PASSWORD: ${get-customer-details.response.data.records[0].fields.wgPassword}
      application_list: ${merge-info.merged_listings}