name: job-applicator
apiRevision: edurata.io/v1
description: |
  Workflow that scans freelance.de for new job postings and automatically applies to them based on user-defined preferences.
interface:
  inputs:
    type: object
    properties:
      userEmail:
        type: string
        description: The email address of the user of the workflow
      airtableApiKey:
        type: string
      jobTableId:
        type: string
        description: "The table name containing job postings and customer emails."
      customerTableId:
        type: string
        description: "The table name containing customer information (email, CV)."
    required: [airtableApiKey, jobTableId, customerTableId]
  outputs:
    type: object
    properties:
      status:
        type: string
        description: "Status of the workflow execution."
inputs:
  airtableApiKey: ${secrets.AIRTABLE_API_KEY}
  jobTableId: ${variables.applicationConfig.applicationBot.jobTableId}
  customerTableId: ${variables.applicationConfig.applicationBot.peopleTableId}
  maxElapsedDays: ${variables.applicationConfig.applicationBot.maxElapsedDays}
steps:
  extract-freelancede-job-postings:
    if: 
      and: 
        - "!!":
            ${get-customer-details.response.data.records[0].fields.freelancedeUser}
        - "!!":
            ${get-customer-details.response.data.records[0].fields.freelancedePw}
    description: Extract job postings via html parsing and return a list of job postings.
    source:
      repoUrl: https://github.com/Edurata/edurata-workflows.git
      path: apps/platforms/applicationbot/freelance.de
    props:
      FREELANCE_DE_USERNAME: ${get-customer-details.response.data.records[0].fields.freelancedeUser}
      FREELANCE_DE_PASSWORD: ${get-customer-details.response.data.records[0].fields.freelancedePw}
      query_url: https://www.freelance.de/projekte?query=((AWS%20OR%20GCP)%20OR%20KUBERNETES)%20AND%20TERRAFORM%20AND%20CI&sortBy=last_update&lastUpdate=today
  check-if-record-exists:
    foreach: "${extract-freelancede-job-postings.projects}"
    description: "Check if the job posting already exists in the Airtable."
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.jobTableId}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      params:
        filterByFormula: "{sourceUrl} = '${each.link}'"
  add-new-jobs-to-airtable:
    foreach: "${extract-freelancede-job-postings.projects}"
    if: 
      and:
        - "!!": ${get-customer-details.response.data.records[0].fields.freelancedeUser}
        - "!!": ${get-customer-details.response.data.records[0].fields.freelancedePw}
        - "!":
            "!!": ${check-if-record-exists[each.index].response.data.records}
    description: Add new job postings to the Airtable.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: "https://api.airtable.com/v0/${inputs.jobTableId}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      data:
        fields:
          raw: "${each}"
          userEmail: "${inputs.userEmail}"
          processed: false
  get-job-postings:
    description: "Retrieve job postings from Airtable where 'processed' is not true."
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      _add-new-jobs-to-airtable: "${add-new-jobs-to-airtable}"
      method: GET
      url: "https://api.airtable.com/v0/${inputs.jobTableId}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      params:
        limit: 100
        filterByFormula: "AND(NOT({processed}),{userEmail}='${inputs.userEmail}')"
  get-customer-details:
    description: "Retrieve customer details (email and CV) from the second Airtable table."
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "https://api.airtable.com/v0/${inputs.customerTableId}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      params:
        filterByFormula: "email = '${inputs.userEmail}'"
  download-CV:
    description: "Download the CV of the user from the customer table."
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: "${get-customer-details.response.data.records[0].fields.CV[0].url}"
      streamToFile: true
  extract-CV-content:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/extract/extract-text
    props:
      input_file: "${download-CV.response.file}"
  extract-target-address:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    foreach: "${get-job-postings.response.data.records}"
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        In the following text try to find the email address of the original author of the message.
        Return only the email address. The ${inputs.userEmail} is of the recipient so can't be it.
         Job Posting Details: ${each.fields.raw} 
      message: Find the address
  generate-email-content:
    description: "Generate a personalized job application email using ChatGPT."
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    foreach: "${get-job-postings.response.data.records}"
    concurrency: 1
    props:
      model: gpt-4o
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        Using the following CV and job posting information, generate an email body in html highlighting my skills and 
        qualifications to apply for the job. The email should be tailored to the job description. 
        Only return the completed email body in html formatting without any linebreaks and in the language of the job posting details.
        Keep it very short and dry but friendly. Don't use corporate language. maximum 400 characters. Always mention the hourly rate and availability.

        Mention that it is in response to a job opening on ${each.fields.sourcePage}.

        In your response don't include markup formatting and return the body directly.
        Only return the email body as the header is done separately.
        As its html, you must use <br> for linebreaks.

        Job Posting Details: ${each.fields.raw} 

        My Hourly rate: ${get-customer-details.response.data.records[0].fields.hourlyRate}.

        My Availability: ${get-customer-details.response.data.records[0].fields.availableFrom}.

        My CV: ${extract-CV-content.extracted_text}.
      message: "Create the email in html and only return the email body without markup formatting."
  generate-email-subject:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    foreach: "${get-job-postings.response.data.records}"
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        "Using the job posting information, generate an email subject that references the job opening.
         Only return the completed subject in the language of the job posting without formatting.
         Job Posting Details: ${each.fields.raw} 
      message: "Create the email subject and return only text without formatting."
  prepare-gmail-raw:
    foreach: "${generate-email-content}"
    description: "Prepare the base64 encoded raw email content for sending using Gmail API."
    runtime: python3_10
    interface:
      inputs:
        type: object
        properties:
          html_body:
            type: string
          sender:
            type: string
          to:
            type: string
          subject:
            type: string
          cv_filepath:
            type: file
      outputs:
        type: object
        properties:
          raw:
            type: string
    code: |
      import base64
      import email
      from email.mime.multipart import MIMEMultipart
      from email.mime.text import MIMEText
      from email.mime.base import MIMEBase
      from email import encoders
      import os
      def handler(inputs):
          message = inputs['html_body'].replace('\n', '<br>')
          cv_filepath = inputs['cv_filepath']
          msg = MIMEMultipart()
          msg['From'] = inputs['sender']
          msg['To'] = inputs['to']
          msg['Subject'] = inputs['subject']
          msg.attach(MIMEText(message, 'html'))

          attachment = open(cv_filepath, "rb")
          part = MIMEBase('application', 'octet-stream')
          part.set_payload(attachment.read())
          encoders.encode_base64(part)
          part.add_header('Content-Disposition', f"attachment; filename= {os.path.basename(cv_filepath)}")
          msg.attach(part)

          raw = base64.urlsafe_b64encode(msg.as_bytes()).decode()
          return {'raw': raw}
    props:
      sender: "${inputs.userEmail}"
      to: "juliandemourgues@edurata.com"
      # to: "${extract-target-address[each.index].response}"
      subject: "${generate-email-subject[each.index].response}"
      html_body: "${each.response}"
      cv_filepath: "${download-CV.response.file}"
  send-email:
    foreach: "${prepare-gmail-raw}"
    description: "Send the generated email using Gmail API."
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      method: POST
      url: "https://gmail.googleapis.com/gmail/v1/users/me/messages/send"
      headers:
        Authorization: "Bearer ${secrets.GMAIL_API_KEY}"
      data:
        raw: "${each.raw}"
  mark-as-processed:
    description: "Mark the processed records in Airtable to prevent duplicate applications."
    foreach: "${get-job-postings.response.data.records}"
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      _send-email: "${send-email}"
      method: PATCH
      url: "https://api.airtable.com/v0/${inputs.jobTableId}/${each.id}"
      headers:
        Authorization: "Bearer ${inputs.airtableApiKey}"
      data:
        fields:
          processed: true
