apiRevision: edurata.io/workflow/v1
name: quote-forwarder
title: Prepare text content
description: |
  Automates the process of fetching images from a Telegram channel, filtering for media content, analyzing images for labels and text, generating inspirational quotes based on labels, and posting the resulting content to social media.
interface:
  inputs:
    properties:
      sourceTelegramAccount:
        type: string
        description: |
          The telegram account id to fetch the pictures from.
    required:
    - sourceTelegramAccount
steps:
  get-telegram-pictures-today:
    description: This step retrieves today's pictures from a specified Telegram account using the Telegram API and saves them to a designated image directory.
    cache: true
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/extract/fetch-telegram
    props:
      TELEGRAM_API_HASH: ${secrets.TELEGRAM_API_HASH}
      TELEGRAM_API_ID: ${variables.TELEGRAM_API_ID}
      TELEGRAM_API_SESSION: ${secrets.TELEGRAM_API_SESSION}
      sinceDays: '0'
      channelId: ${inputs.sourceTelegramAccount}
      imageDir: ${meta.cacheMountDir}/images/telegram/${meta.executionId}
  filter-for-with-media:
    description: This step involves filtering the posts from today's Telegram pictures for those that include media.
    runtime: python3_10
    interface:
      inputs:
        properties:
          posts:
            type: array
            items:
              type: object
              properties:
                mediaPath:
                  type: file
      outputs:
        properties:
          posts:
            type: array
            items:
              type: object
              properties:
                mediaPath:
                  type: file
    code: |
      def handler(event):
          posts = event["posts"]
          posts_with_media = [x for x in posts if "mediaPath" in x and x["mediaPath"] is not None]
          return {"posts": posts_with_media}
    props:
      posts: ${get-telegram-pictures-today.posts}
  extract-info:
    foreach: ${filter-for-with-media.posts[*].mediaPath}
    description: This step extracts information from each media file in the filtered posts, specifically labels and text, using specified AWS credentials.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/extract/analyse-image-aws-rekognition
    props:
      AWS_ACCESS_KEY_ID: ${secrets.AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${secrets.AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${secrets.AWS_REGION}
      image_file: ${each}
      types:
      - labels
      - text
  extract-usable-images:
    description: This step involves extracting usable images from the information obtained in the 'extract-info' step.
    runtime: python3_10
    code: |
      def handler(event):
          useful_pictures = []
          for index, info in enumerate(event["picture_info"]):
              if len(info["text"]) == 0:
                  labels = [x["Name"] for x in info["labels"]]
                  labels = [x for x in labels if x not in ["Person", "Human", "Cartoon", "Baby", "Frog"]][:6]
                  combi = {
                      "labels": labels,
                      "pictureIndex": index
                  }
                  useful_pictures.append(combi)
          return {"useful_pictures": useful_pictures[:8]}
    props:
      picture_info: ${extract-info}
  generate-quotes:
    foreach: ${extract-usable-images.useful_pictures}
    description: This step generates an inspiring quote for each label from the useful pictures extracted in the previous step, using the OpenAI API.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: You generate a quote for incoming labels.
      message: |
        Find a suitable inspiring quote for the labels: ${each.labels}
  push-to-x:
    foreach: ${extract-usable-images.useful_pictures}
    description: This step pushes a message and media content to a specified platform, iterating over each useful picture extracted from a previous step, using a bearer token for authentication.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/tweet
    props:
      BEARER_TOKEN: ${secrets.TWITTER_API_BEARER_TOKEN}
      message: ${generate-quotes[each.index].response}
      mediaPath: ${filter-for-with-media.posts[each.pictureIndex].mediaPath}
