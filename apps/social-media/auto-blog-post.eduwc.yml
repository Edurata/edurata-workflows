name: post-blog
apiRevision: edurata.io/workflow/v1
description: The process retrieves the latest unprocessed blog from an Airtable table and posts it to dynamodb.
interface:
  inputs:
    type: object
    properties:
      blog_posts_table_id:
        type: string
        description: The Airtable ID in the format app/tbl for blog posts.
      blog_dynamodb_table_name:
        type: string
        description: The ID of the DynamoDB table where the blog post will be stored.
steps:
  get-latest-unprocessed-post:
    description: This step retrieves the latest unprocessed post from a specified Airtable table using a GET request, filtering for records that have not been processed and have a non-empty workflow path.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://api.airtable.com/v0/${inputs.blog_posts_table_id}
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
      params:
        filterByFormula: AND(NOT({processed}), {freeToPublish})
        limit: 1
  get-today-time:
    code: |
      import datetime
      def handler(inputs):
          now = datetime.datetime.now(datetime.timezone.utc)
          # return iso string with timezone
          return now.isoformat(timespec='seconds')
    runtime: python3_10
  get-english-meta-from-post:
    description: This step extracts tags from the latest unprocessed post's fields using a Python function.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        You are going to receive a blog post. 
        Generate the following information and return it in a json with the keys:
        - slug (a slug for the blog post)
        - tags (tags that describe the blog post)
        - category (one of NORMAL, WORKFLOW (describing a workflow step-by-step), CASE_STUDY, TUTORIAL, FEATURE, RELEASE)
        - title
        - subtitle
        - htmlBody (the body of the blog post in html without linebreaks)
        Only return the json without any other text, formatting and linebreaks and return it in one line.
        Make sure to format any references to images in the blog post with the following format:
        <img src="https://cdn.edurata.com/blog/{slug}/{index}.jpg" alt="Image description">
      message: ${get-latest-unprocessed-post.response.data.records[0].fields.content}
      parseResponseToJson: true
  get-german-meta-from-post:
    description: This step extracts tags from the latest unprocessed post's fields using a Python function.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        Du erhältst einen Blog Post.
        Generiere die folgenden Informationen auf Deutsch und gib sie in einem JSON mit den folgenden Keys zurück:
        - tags (tags die den Blog Post beschreiben)
        - title
        - subtitle
        - htmlBody (der Body des Blog Posts auf Deutsch in html ohne Zeilenumbrüche)
        Alle Bilder im Blog Post sollen mit dem folgenden Format referenziert werden:
        <img src="https://cdn.edurata.com/blog/{slug}/{index}.jpg" alt="Image description">
      message: ${get-latest-unprocessed-post.response.data.records[0].fields.content}
      parseResponseToJson: true
  download-images:
    foreach: ${get-latest-unprocessed-post.response.data.records[0].fields.images}
    description: This step downloads images from the blog post and saves them to the local file system.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: ${each.url}
      streamToFile: true
  upload-images-to-s3:
    foreach: ${download-images[*].response.file}
    description: This step uploads images to an S3 bucket using the data-to-s3 function.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/upload-s3
    props:
      AWS_ACCESS_KEY_ID: ${secrets.AWS_ACCESS_KEY_ID_CDN_PUSH}
      AWS_SECRET_ACCESS_KEY: ${secrets.AWS_SECRET_ACCESS_KEY_CDN_PUSH}
      AWS_REGION: ${secrets.AWS_REGION}
      bucket_name: edurata-cdn-prod
      files:
        - path: ${each.response.file}
          key: blog/${get-english-meta-from-post.response.slug}/${each.index}.jpg
  post-to-dynamodb:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: clients/dynamodb
    props:
      AWS_ACCESS_KEY_ID: ${secrets.AWS_ACCESS_KEY_ID_DYNAMO_CREATE}
      AWS_SECRET_ACCESS_KEY: ${secrets.AWS_SECRET_ACCESS_KEY_DYNAMO_CREATE}
      AWS_REGION: ${secrets.AWS_REGION}
      operation: create
      table_name: ${inputs.blog_dynamodb_table_name}
      item:
        id: ${get-english-meta-from-post.response.slug}
        htmlBody: ${get-english-meta-from-post.response.htmlBody}
        htmlBodyDe: ${get-german-meta-from-post.response.htmlBodyDe}
        # computed
        title: ${get-english-meta-from-post.response.title}
        titleDe: ${get-german-meta-from-post.response.title}
        subtitle: ${get-english-meta-from-post.response.subtitle}
        subtitleDe: ${get-german-meta-from-post.response.subtitle}
        tags: ${get-english-meta-from-post.response.tags}
        tagsDe: ${get-german-meta-from-post.response.tags}
        blogCategory: ${get-english-meta-from-post.response.category}
        publisher: Edurata Team
        # standard
        __typename: BlogArticle
        updatedAt: ${get-today-time}
        createdAt: ${get-today-time}
  # todo make notifications to social media
  update-airtable-blog:
    if:
      "==":
        - ${post-to-dynamodb.result.message}
        - "Item created"
    description: This step updates a specific blog post in an Airtable database with generated content and sets its 'freeToPublish' field to False, using a POST request.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: PATCH
      url: https://api.airtable.com/v0/${inputs.blog_posts_table_id}/${get-latest-unprocessed-post.response.data.records[0].id}
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
      data:
        fields:
          processed: true