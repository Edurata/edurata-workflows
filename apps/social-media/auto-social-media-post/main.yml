name: airtable-blog-to-multiple-platforms
apiRevision: edurata.io/workflow/v1
description: The workflow automates the process of posting blog content across various platforms. It retrieves user settings and the latest unprocessed blog post from an Airtable database. Depending on user settings, it generates and posts content on Reddit, LinkedIn, and Twitter. The content includes a Reddit post with a blog teaser, a summarized version of the blog for LinkedIn, and a teaser for Twitter. Lastly, the workflow updates the Airtable record with the URLs of the shared posts and marks the post as released.
interface:
  inputs:
    type: object
    properties:
      blog_posts_table_id:
        type: string
        description: The Airtable ID in the format app/tbl for blog posts
steps:
  get-latest-unprocessed-post:
    description: This step retrieves the latest unprocessed blog post from an Airtable database using a GET request, filtering for posts with a status that is not 'processed', and limiting the results to one entry.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://api.airtable.com/v0/${inputs.blog_posts_table_id}
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
      params:
        # released is false and freeToPublish is true
        filterByFormula: AND(NOT({released}), {freeToPublish} = true)
        limit: 1
  create-meta-info-blog:
    description: This step creates metadata information for a blog post, including the title, subtitle, and tags, using the latest unprocessed post data.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      model: gpt-4o
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        You are going to receive a blog post.
        You should generate the metadata information for the blog post.
        The metadata information should include the title, subtitle, and tags.
        return it in a json format with the following keys:
        title, subtitle, tags
        The tags should be a list of strings.
        Return only the json.
      message: ${get-latest-unprocessed-post.response.data.records[0].fields.content}
  parse-string-to-json:
    runtime: python3_10
    code: |
      import json
      import os

      def handler(event, context):
          # Parse the JSON string from the input
          json_string = event['message']
          parsed_json = json.loads(json_string)
          
          # Return the parsed JSON
          return parsed_json
    props:
      message: ${create-meta-info-blog.response}
  post-blog-to-edurata:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: clients/dynamodb
    props:
      AWS_ACCESS_KEY_ID: ${secrets.AWS_ACCESS_KEY_ID_DYNAMO_CREATE}
      AWS_SECRET_ACCESS_KEY: ${secrets.AWS_SECRET_ACCESS_KEY_DYNAMO_CREATE}
      AWS_REGION: ${variables.AWS_REGION}
      operation: create
      table_name: ${inputs.DYNAMODB_BLOG_TABLE_NAME}
      item:
        title: ${parse-string-to-json.parsed_json.title}
        subtitle: ${parse-string-to-json.parsed_json.subtitle}
        tags: ${parse-string-to-json.parsed_json.tags}
        htmlBody: ${get-latest-unprocessed-post.response.data.records[0].fields.content}
        blogCategory: WORKFLOW
  generate-post-reddit:
    if:
      and:
        - in:
            - redditPost
            - ${get-user-settings.response.data.records[0].fields.enabledTargets}
        - "!!": ${get-user-settings.response.data.records[0].fields.subReddits}
    description: This step generates a Reddit post by formatting a blog post with a teaser and a link to the blog, using the title and content of the latest unprocessed post.
    foreach:
      - title
      - content
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: "You are going to receive a blog post. Format it so it can be posted with a teaser to reddit and then linking to the blog link. \nReturn only the string ${each}.\n"
      message: ${get-latest-unprocessed-post.response.data.records[0].fields.content}
  generate-post-linkedin:
    if:
      in:
        - linkedinPost
        - ${get-user-settings.response.data.records[0].fields.enabledTargets}
    description: This step generates a summarized version of the latest unprocessed blog post to be used as a teaser on LinkedIn.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        You are going to receive a blog post. Make a summary so it can be posted as a teaser to linkedin.
        Return only the content.
      message: ${get-latest-unprocessed-post.response.data.records[0].fields.content}
  generate-post-x:
    description: This step generates a summarized version of a received blog post, which will be posted as a teaser on a platform formerly known as Twitter.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        You are going to receive a blog post. Make a summary so it can be posted as a teaser to x (formerly twitter).
        Return only the tweet.
      message: ${get-latest-unprocessed-post.response.data.records[0].fields.content}
  post-to-reddit:
    description: This step posts content to specified subreddits on Reddit using the user's access token, if Reddit posting is enabled in the user's settings.
    if:
      and:
        - in:
            - redditPost
            - ${get-user-settings.response.data.records[0].fields.enabledTargets}
        - "!!": ${get-user-settings.response.data.records[0].fields.subReddits}
    foreach: ${get-user-settings.response.data.records[0].fields.subReddits}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: https://oauth.reddit.com/api/submit
      headers:
        Authorization: Bearer ${secrets.REDDIT_ACCESS_TOKEN}
        User-Agent: Reddit-Reply-Bot/0.1 by Edurata
        Content-Type: application/x-www-form-urlencoded
      data:
        api_type: json
        sr: ${each}
        title: ${generate-post-reddit[0].response}
        kind: self
        text: ${generate-post-reddit[1].response}

  post-to-linkedin:
    description: This step posts a message to LinkedIn using the LinkedIn API, provided that the user has enabled LinkedIn as a target in their settings.
    if:
      in:
        - linkedinPost
        - ${get-user-settings.response.data.records[0].fields.enabledTargets}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: https://api.linkedin.com/v2/shares
      headers:
        Authorization: Bearer ${secrets.LINKEDIN_API_KEY}
      data:
        owner: urn:li:person:123456789
        text: ${generate-post-linkedin.response}
  post-to-twitter:
    description: This step posts a tweet to Twitter using the POST method, with the content of the tweet being the response from the generate-post-x step, but only if 'twitterPost' is included in the user's enabled targets.
    if:
      in:
        - twitterPost
        - ${get-user-settings.response.data.records[0].fields.enabledTargets}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: https://api.twitter.com/2/tweets
      headers:
        Authorization: Bearer ${secrets.TWITTER_BEARER_TOKEN}
        Content-Type: application/json
      data:
        text: ${generate-post-x.response}
  update-airtable:
    description: This step updates an Airtable record with the URLs of the blog post shared on LinkedIn, Reddit, and Twitter, and marks the post as released.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: PATCH
      url: https://api.airtable.com/v0/${inputs.blog_posts_table_id}/${get-latest-unprocessed-post.response.data.records[0].fields.id}
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
      body:
        fields:
          linkedinUrl: ${post-to-linkedin.response.url}
          redditUrl: ${post-to-reddit.response.url}
          xUrl: ${post-to-twitter.response.url}
          released: true
