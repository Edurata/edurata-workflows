apiRevision: edurata.io/workflow/v1
name: invoice-processor
title: Invoice Processor
schedule: 0 9 * * *
description: The workflow automates the process of scanning inbox emails for invoices, extracting and downloading attachments, tagging emails in Gmail, saving invoices to a structured Google Drive folder, and forwarding them to a specified email address. It retrieves user data from Airtable API and merges it with base configuration. It creates labels in Gmail for success, failure, and skip tags and retrieves label IDs from Gmail's API. The workflow also retrieves the ten most recent emails from the user's Gmail account that were received after January 1, 2021, have a PDF attachment, and do not have specific labels. It then fetches detailed information for each new email message, filters attachments, downloads and saves them, forwards a PDF by making a POST request to the Gmail API, creates a new folder path in Google Drive, uploads files to Google Drive, and automates the process of tagging emails.
interface:
  inputs:
    properties:
      peopleTableId:
        type: string
        description: |
          The base id + table_id from which to take the people
      userEmail:
        type: string
        description: |
          The email address of the user
      config:
        type: object
        description: |
          The configuration of the invoice processor
        properties:
          gdriveFolderName:
            type: string
            description: |
              The Google Drive folder Name to save the invoices to
          forwardEmail:
            type: string
            description: |
              The email address to forward the invoices to
          successTag:
            type: string
            default: to-datev/processed
          failTag:
            type: string
            default: to-datev/failed
          skipTag:
            type: string
            default: to-datev/skipped
          additionalQuery:
            type: string
            description: |
              Additional query to filter the emails
            default: ""
    required:
      - config
      - userEmail
      - peopleTableId
inputs:
  config: ${variables.invoices_forward_config}
  peopleTableId: ${variables.accountingbot_people_table_id}
steps:
  get-people-data:
    description: This step retrieves data from an Airtable API for a specific user's email, provided the user is not disabled, using the Airtable API key for authorization.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://api.airtable.com/v0/${inputs.peopleTableId}?filterByFormula=AND(NOT(disabled),{email}="${inputs.userEmail}")
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
  merge-config:
    description: This step is merging the user configuration data retrieved from the 'get-people-data' response with the base configuration input.
    runtime: python3_10
    code: |
      def handler(inputs):
          user_config = inputs["user_config"]
          base_config = inputs["base_config"]
          # merge both together
          merged = {**base_config, **user_config}
          return  {"config": merged}
    props:
      user_config: ${get-people-data.response.data.records[0].fields}
      base_config: ${inputs.config}
    interface:
      inputs:
        properties:
          user_config:
            type: object
            description: User specific configuration data
          base_config:
            type: object
            description: Base configuration data
        required:
          - user_config
          - base_config
      outputs:
        properties:
          merged_config:
            type: object
            description: Merged configuration data
  create-labels:
    description: This step creates labels in Gmail for success, failure, and skip tags, using a POST request to the Gmail API.
    optional: true
    foreach:
      - ${merge-config.config.successTag}
      - ${merge-config.config.failTag}
      - ${merge-config.config.skipTag}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://gmail.googleapis.com/gmail/v1/users/me/labels
      method: POST
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      data:
        name: ${each}
      throwError: false
  get-label-ids:
    description: This step retrieves the label IDs from Gmail's API using a specified URL and authorization headers, depending on the creation of labels.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://gmail.googleapis.com/gmail/v1/users/me/labels
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      __create-labels: ${create-labels}
  transform-tags-to-label-ids:
    description: This step transforms tags into label IDs, using the label IDs obtained from the 'get-label-ids' step and the tags specified in the merge-config configuration (successTag, failTag, skipTag).
    runtime: python3_10
    code: |
      def handler(inputs):
          label_ids = {}
          for label in inputs["get-label-ids"]["response"]["data"]["labels"]:
            if label["name"] == inputs["successTag"]:
              label_ids["successTag"] = label["id"]
            elif label["name"] == inputs["failTag"]:
              label_ids["failTag"] = label["id"]
            elif label["name"] == inputs["skipTag"]:
              label_ids["skipTag"] = label["id"]
          return {"label_ids": label_ids}
    props:
      get-label-ids: ${get-label-ids}
      successTag: ${merge-config.config.successTag}
      failTag: ${merge-config.config.failTag}
      skipTag: ${merge-config.config.skipTag}
    interface:
      inputs:
        properties:
          get-label-ids:
            type: object
            description: Object containing label ids
          successTag:
            type: string
            description: Tag to be used for successful operations
          failTag:
            type: string
            description: Tag to be used for failed operations
          skipTag:
            type: string
            description: Tag to be used for skipped operations
        required:
          - get-label-ids
          - successTag
          - failTag
          - skipTag
      outputs:
        properties:
          transformedTags:
            type: object
            description: Object containing transformed tags to label ids
        required:
          - transformedTags
  get-new-mails-without-tag:
    description: This step is retrieving the ten most recent emails from the user's Gmail account that were received after January 1, 2021, have a PDF attachment, and do not have specific labels, using a provided API key for authorization.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://www.googleapis.com/gmail/v1/users/me/messages
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      params:
        q: after:2021/01/01 ${merge-config.config.addFilter} -label:${merge-config.config.successTag} -label:${merge-config.config.failTag} -label:${merge-config.config.skipTag} has:attachment filename:pdf
        maxResults: 10
      __create-labels: ${create-labels}
  continue-if-new-mails:
    description: This step continues the process if there are new emails without tags.
    if:
      ">":
        - ${get-new-mails-without-tag.response.data.resultSizeEstimate}
        - 0
    runtime: python3_10
    code: |
      def handler(inputs):
          return {"mails": inputs["get-new-mails-without-tag"]["response"]["data"]["messages"]}
    props:
      get-new-mails-without-tag: ${get-new-mails-without-tag}
    interface:
      inputs:
        properties:
          get-new-mails-without-tag:
            type: object
            properties:
              response:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      resultSizeEstimate:
                        type: integer
                      messages:
                        type:
                          - array
                          - "null"
                    required:
                      - resultSizeEstimate
                      - messages
                required:
                  - data
            required:
              - response
        required:
          - get-new-mails-without-tag
      outputs:
        type: object
        properties:
          continue:
            type: boolean
        required:
          - continue
  get-mails-info:
    description: This step fetches detailed information for each new email message from the Gmail API, using the message ID, in a full format with specific fields such as 'id' and 'payload'.
    foreach: ${continue-if-new-mails.mails}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://gmail.googleapis.com/gmail/v1/users/me/messages/${each.id}
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      params:
        format: full
        fields: id,payload
  filter-attachments:
    description: This step involves filtering attachments from the data received from the 'get-mails-info' responses.
    source:
      repoUrl: https://github.com/Edurata/edurata-workflows.git
      path: apps/mail/invoice-forwarder/filter-attachments
    props:
      messages: ${get-mails-info[*].response.data}
  download-attachments:
    description: This step is downloading attachments from specific messages using the Gmail API, iterating over each filtered attachment from the previous step.
    foreach: ${filter-attachments.filtered_attachments}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://gmail.googleapis.com/gmail/v1/users/me/messages/${each.message_id}/attachments/${each.attachment_id}
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      streamToFile: true
  forward-pdf:
    description: This step forwards PDF attachments using the Outlook email function.
    if:
      "!!": ${merge-config.config.forwardEmail}
    else: success
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/send-outlook-email
    props:
      OUTLOOK_API_KEY: ${secrets.OUTLOOK_API_KEY}
      userEmail: ${inputs.userEmail}
      recipient: ${merge-config.config.forwardEmail}
      subject: "Invoice"
      body: "Please find the attached invoices."
      attachments: ${save-attachments.new_files}
  get-folder-id:
    description: This step involves obtaining the folder ID, provided that the Google Drive folder name in the merge-config is not null.
    runtime: python3_10
    if:
      "!!": ${merge-config.config.gdriveFolderName}
    code: |
      import datetime
      def handler(inputs):
          # today date like 2021-01-01
          today = datetime.datetime.now().strftime("%Y-%m-%d")
          return {"folder_name": today}
    interface:
      inputs:
        properties:
          merge-config:
            type: object
            properties:
              config:
                type: object
                properties:
                  gdriveFolderName:
                    type: string
                required:
                  - gdriveFolderName
            required:
              - config
        required:
          - merge-config
      outputs:
        properties:
          folderId:
            type: string
        required:
          - folderId
  create-folderpath:
    if:
      "!!": ${filter-attachments.filtered_attachments}
    description: This step creates a new folder path in Google Drive using the provided OAuth token and folder name, only if there are filtered attachments present.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/create-gdrive-folderpath
    props:
      OAUTH_TOKEN: ${secrets.GMAIL_API_KEY}
      folder_path: ${merge-config.config.gdriveFolderName}/${get-folder-id.folder_name}
  get-parent-folder-id:
    description: This step is retrieving the ID of a parent folder from Google Drive using a GET request, with the folder name and API key as parameters.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://www.googleapis.com/drive/v3/files
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      params:
        q: name='${get-folder-id.folder_name}' and mimeType='application/vnd.google-apps.folder'
      __create-folderpath: ${create-folderpath}
  upload-files-in-gdrive:
    description: This step uploads files to Google Drive, specifically to a parent folder, by iterating through each new file saved in the 'save-attachments' step, using the Gmail API key for authorization.
    foreach: ${save-attachments.new_files}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: clients/gdrive
    props:
      OAUTH_TOKEN: ${secrets.GMAIL_API_KEY}
      action: upload
      upload_file_name: ${filter-attachments.filtered_attachments[each.index].attachment_id}
      parent_folder_id: ${get-parent-folder-id.response.data.files[0].id}
      file_path: ${each}
  map-tags-to-threads:
    description: This step involves mapping tags to threads based on the properties of new emails without tags, filtered attachments, and specific success, fail, and skip tags.
    runtime: python3_10
    code: |
      def handler(inputs):
        thread_to_tags = {}
        for message in inputs["all_messages"]:
            thread_id = message["threadId"]

            if thread_id in thread_to_tags:
                continue

            is_in_filtered_attachments = any(
                attachment["message_id"] == message["id"]
                for attachment in inputs["filtered_attachments"]
            )
            thread_to_tags[thread_id] = (
                inputs["successTag"] if is_in_filtered_attachments else inputs["skipTag"]
            )

        return {  # ✅ wrap in a dict with key matching output schema
            "tagged_messages": [
                {"threadId": thread_id, "tag": tag}
                for thread_id, tag in thread_to_tags.items()
            ]
        }
    props:
      all_messages: ${get-new-mails-without-tag.response.data.messages}
      filtered_attachments: ${filter-attachments.filtered_attachments}
      successTag: ${transform-tags-to-label-ids.label_ids.successTag}
      failTag: ${transform-tags-to-label-ids.label_ids.failTag}
      skipTag: ${transform-tags-to-label-ids.label_ids.skipTag}
    interface:
      inputs:
        properties:
          all_messages:
            type: array
            items:
              type: object
          filtered_attachments:
            type: array
            items:
              type: object
          successTag:
            type: string
          failTag:
            type: string
          skipTag:
            type: string
        required:
          - all_messages
          - filtered_attachments
          - successTag
          - failTag
          - skipTag
      outputs:
        properties:
          tagged_messages:
            type: array
            items:
              type: object
        required:
          - tagged_messages
  tag-emails:
    description: This step automates the process of tagging emails by posting a request to the Gmail API for each thread specified in the 'map-tags-to-threads' object, using the 'GMAIL_API_KEY' for authorization.
    foreach: ${map-tags-to-threads.tagged_messages}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: https://gmail.googleapis.com/gmail/v1/users/me/threads/${each.threadId}/modify
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      data:
        addLabelIds:
          - ${each.tag}
        removeLabelIds: []
