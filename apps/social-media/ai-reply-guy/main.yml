name: hot-post-keyword-responder
apiRevision: edurata.io/workflow/v1
description: The workflow begins by extracting user data from an Airtable database, which is used to create a Reddit search query. This query is executed to find 'hot' posts, limited to 50 results. The posts are then filtered by a minimum upvote threshold. For each qualifying post, a response is generated using OpenAI's GPT-3 model. Finally, comments are posted on Reddit using these responses, and all feedback is captured and organized.
interface:
  inputs:
    type: object
    properties:
      platform:
        type: string
        description: The platform to search (e.g., Reddit)
      keywords:
        type: array
        items:
          type: string
        description: Keywords to search for in posts
      min_upvotes:
        type: integer
        description: Minimum number of upvotes for a post to be considered 'hot'
      chatgpt_prompt:
        type: string
        description: The prompt template to use with ChatGPT for generating a response
  outputs:
    type: object
    properties:
      comments_posted:
        type: array
        items:
          type: object
          properties:
            post_id:
              type: string
            comment_id:
              type: string
        description: List of comments posted with their post and comment IDs
steps:
  get-people-data:
    description: This step retrieves data from an Airtable database using a specific URL and headers, filtering for records where the 'disabled' field is not true and the 'email' field matches the inputted user email.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://api.airtable.com/v0/${inputs.peopleTableId}?filterByFormula=AND(NOT(disabled),{email}="${inputs.userEmail}")
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
  construct-reddit-query:
    description: This step constructs a query for Reddit search using the search terms obtained from the first record of the 'get-people-data' response.
    runtime: python3_10
    code: |
      def handler(inputs):
          terms = [term.strip() for term in inputs["search_terms"].split(",")]
          output_string = ' OR '.join([f'selftext:"{term}"' for term in terms])
          return {"formatted_string": output_string}
    props:
      search_terms: ${get-people-data.response.data.records[0].fields.searchTerms}
  search-posts:
    description: This step is performing a GET request to search for posts on Reddit using a specified query, sorting them by 'hot' and limiting the results to 50, using a specific user agent header.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://www.reddit.com/search
      params:
        q: ${construct-reddit-query.formatted_string}
        sort: hot
        limit: 50
      headers:
        User-Agent: EdurataBot/1.0
  filter-hot-posts:
    description: This step filters out posts from the data provided that have upvotes equal to or greater than the minimum upvotes specified in the input.
    if: ${each.data.ups} >= ${inputs.min_upvotes}
    runtime: python3_10
    code: |
      def handler(inputs):
          return {
              "filtered_post": {
                  "post_id": inputs["data"]["id"],
                  "title": inputs["data"]["title"],
                  "content": inputs["data"]["selftext"]
              }
          }
    props:
      posts: ${search-posts.response.data.data.children}
  generate-chatgpt-response:
    description: This step is generating a response from OpenAI's GPT-3 model for each post in the filtered posts, using a POST request to the OpenAI API.
    foreach: ${filter-hot-posts.filtered_post}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: https://api.openai.com/v1/chat/completions
      headers:
        Authorization: Bearer ${secrets.OPENAI_API_KEY}
      data:
        model: gpt-3.5-turbo
        messages:
        - role: user
          content: ${inputs.chatgpt_prompt.replace('{title}', each.title).replace('{content}', each.content)}
  post-comment:
    description: This step posts a comment on Reddit using the generated response from ChatGPT for each hot post filtered previously.
    foreach: ${generate-chatgpt-response.generated_reply}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: https://oauth.reddit.com/api/comment
      headers:
        Authorization: Bearer ${secrets.REDDIT_ACCESS_TOKEN}
      data:
        parent_id: t3_${filter-hot-posts.filtered_post.post_id}
        text: ${each}
    outputs:
      comment_id: ${post-comment.response.data.json.data.things[0].data.id}
  collect-comments:
    description: This step involves gathering and organizing all necessary comments or feedback.
    runtime: python3_10
    code: |-
      def handler(inputs):
          comments = []
          for item in inputs["post-comment"]:
              comments.append({
                  "post_id": item["parent_id"].replace("t3_", ""),
                  "comment_id": item["comment_id"]
              })
          return {"comments_posted": comments}
