apiRevision: edurata.io/v1
name: hello-world
title: Testing all runtimes with a hello-world function.
description: |
  Testing basic functionality of all runtimes with a hello-world print.
interface:
  inputs:
    properties:
      messages:
        type: array
        items:
          type: string
        default: ["Hello", "World"]
  outputs:
    properties:
      messageFromDocker:
        type: string
      messageFromPython:
        type: string
      messageFromNode:
        type: string
outputs:
  messageFromDocker: ${test-docker-upstream.message}
  messageFromPython: ${test-python.message}
  messageFromNode: ${test-node.message}
steps:
  construct-message:
    runtime: nodejs20
    code: |
      exports.handler = async (event) => {
        return {
          string: event.messages.join(" ")
        };
      };
    props:
      messages: ${inputs.messages}
  test-python-inline:
    runtime: python3_10
    code: |
      def handler(event):
        print("Hello, World!")
    props:
      message: "Message from python inline: ${construct-message.string}"
  test-node-inline:
    runtime: nodejs20
    code: |
      exports.handler = async (event) => {
        console.log("Hello, World!");
      };
    props:
      message: "Message from node inline: ${construct-message.string}"
  test-python:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: tests/python
    props:
      message: "Message from python: ${construct-message.string}"
  test-node:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: tests/node
    props:
      message: "Message from node: ${construct-message.string}"
  test-docker-upstream:
    description: |
      This step is using a docker image from the docker hub
    runtime: docker
    interface:
      inputs:
        properties:
          cmd:
            type: cmdValue
            description: The command to run
    props:
      cmd:
        - cowsay
        - "Message from docker: ${construct-message.string}"
  test-foreach-with-if:
    foreach: ${inputs.messages}
    if:
      or:
        - ===:
            - ${each}
            - "Hello"
        - ===:
            - ${each}
            - "World"
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: tests/node
    props:
      message: "Message from node: ${construct-message.string}"