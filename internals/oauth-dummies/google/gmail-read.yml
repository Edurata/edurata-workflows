name: gmail-summary
apiRevision: edurata.io/v1
description: Summarizes Gmail emails from the current week using ChatGPT and stores the summary in Airtable.
interface:
  inputs:
    type: object
    properties:
      airtable_table_id:
        type: string
        description: Airtable table ID in the format app/tbl
steps:
  get-weekly-emails:
    description: Retrieves Gmail messages from this week that have a body.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://www.googleapis.com/gmail/v1/users/me/messages
      method: GET
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      params:
        q: "newer_than:7d"
  get-email-bodies:
    description: For each email from this week, fetch its full message and extract the plain text body.
    foreach: ${get-weekly-emails.response.data.messages}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://www.googleapis.com/gmail/v1/users/me/messages/${each.id}
      method: GET
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      params:
        format: full
  create-prompt:
    runtime: python3_10
    description: This step creates a prompt for ChatGPT by extracting the plain text body of each email.
    code: |
      def handler(inputs):
          # Extract the plain text body from the email parts and make sure that the whole is not longer than the max_tokens for chatgpt
          email_bodies = []
          for part in inputs.bodies:
              if 'parts' in part:
                  for subpart in part['parts']:
                      if 'body' in subpart and 'data' in subpart['body']:
                          email_bodies.append(subpart['body']['data'])
              elif 'body' in part and 'data' in part['body']:
                  email_bodies.append(part['body']['data'])
          # Decode the base64url encoded data
          decoded_bodies = [base64.urlsafe_b64decode(body).decode('utf-8') for body in email_bodies]
          # Join the decoded bodies into a single string
          return {
              "response": ' '.join(decoded_bodies)
          }
    props:
      bodies: ${get-email-bodies.response.data.payload.parts}
  summarize-emails:
    description: This step involves generating a summary of the email bodies using ChatGPT.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/transform/chatgpt
    props:
      model: gpt-4o
      API_KEY: ${secrets.OPENAI_API_KEY}
      systemMessage: |
        You are going to receive a list of email bodies. 
        Generate a summary of the emails in a professional tone.
        Only return the summary in plain text format.
      message: ${create-prompt.response}
  save-summary-to-airtable:
    description: Save the summary to the Airtable table provided.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: https://api.airtable.com/v0/${inputs.airtable_table_id}
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
        Content-Type: application/json
      data:
        fields:
          summary: ${summarize-emails.response}
