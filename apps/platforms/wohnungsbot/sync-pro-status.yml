name: wg-gesucht-application-bot-fetch-stripe-charges
apiRevision: edurata.io/workflow/v1
description: |
  Automates the process of fetching Stripe charges from the past 24 hours, extracting relevant metadata, and updating Airtable with the user's pro status. It retrieves charges, processes metadata, triggers updates, and schedules user pro status in the system.
steps:
  get-24h-back-epoch-time:
    runtime: python3_10
    description: |
      Calculates and returns the epoch timestamp for 24 hours ago to filter relevant Stripe charges.
    code: |
      from datetime import datetime, timedelta
      def handler(inputs):
          yesterday = datetime.now() - timedelta(days=1)
          epoch_time = int(yesterday.timestamp())
          return {'epoch_time': epoch_time}
  fetch-stripe-charges:
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    description: |
      Fetches successful Stripe charges created in the last 24 hours using the epoch time from the previous step.
    props:
      method: GET
      url: "https://api.stripe.com/v1/customers/search"
      headers:
        Authorization: "Bearer ${secrets.STRIPE_API_KEY}"
      params:
        query: "created>${get-24h-back-epoch-time.epoch_time} status:\"succeeded\""
        "expand[]": "data.customer"
  get-metadata-from-charges:
    runtime: python3_10
    description: |
      Extracts metadata from the fetched Stripe charges, including email, deployment ID, schedule, and expiration date, and maps payment amounts to deployment configurations.
    code: |
      import random
      from datetime import datetime, timedelta

      def handler(inputs):
          charges = inputs['fetch-stripe-charges']['data']
          applicationConfig = inputs['applicationConfig']
          metadata = []
          amountToDeploymentId = {}

          # Map amount to deploymentId
          amountToDeploymentId[wohnungsBot.proMonthlyAmount] = applicationConfig['wohnungsBot']['deploymentId']

          for charge in charges:
              # Ensure necessary fields are present to avoid KeyError
              amount = charge.get('amount')
              date = charge.get('created')
              customer = charge.get('customer', {})
              email = customer.get('customer_email')
              created = charge.get('created')
              deploymentId = amountToDeploymentId.get(amount)
              randomHourlySchedule = random.randint(0, 23)
              cron = f'{randomHourlySchedule} * * * *'
              in_one_month_iso_after_creation = datetime.fromisoformat(created) + timedelta(days=30) 
              if deploymentId:
                metadata.append({
                    'email': email,
                    'deploymentId': deploymentId,
                    'created': created,
                    'schedule': cron,
                    'expireDate': in_one_month_iso_after_creation
                })

          return {'metadata': metadata}
    props:
      applicationConfig: ${variables.applicationConfig}
      fetch-stripe-charges: ${fetch-stripe-charges.response.data}
  get-trigger:
    foreach: ${get-metadata-from-charges.metadata}
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    description: |
      Iterates over the extracted metadata to check for existing deployment triggers for each user based on their email.
    props:
      url: ${meta.apiUrl}/deployment/${each.deploymentId}/trigger
      method: GET
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      data: 
        name:
          eq: ${each.email}
  update-trigger:
    foreach: ${get-metadata-from-charges.metadata}
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    description: |
      Iterates over the extracted metadata and updates the deployment trigger with a new schedule, enabling the user's pro status and setting an expiration date.
    props:
      url: ${meta.apiUrl}/deployment/${variables.applicationConfig.wohnungsBot.deploymentId}/trigger/${get-trigger.response.data.items[0].id}
      method: POST
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      data:
        schedule: ${each.schedule}
        disabled: false
        expireDate: ${each.expireDate}
        variables: 
          email: ${each.email}
          isPro: true
