apiRevision: edurata.io/v1
name: setup-microapp-user
title: Setup Bot
description: |
  Setup a bot that uses OAuth after a webhook call from Tally. The first two fields in Tally must be name and email. 
  The fields except data should be filled on deployment as variables or in the webhook.
interface:
  inputs:
    properties:
      data:
        description: |
          The data from the webhook.
        type: object
        properties:
          fields:
            type: array
            items:
              type: object
              properties:
                label:
                  type: string
                value:
                  type: string
      applicationConfig:
        type: object
        description: |
          A mapping of applicationId to appName, oauthPurposeDescription, oauthSecretName, senderEmail, and deploymentRepoPath.
        additionalProperties:
          appName:
            type: string
          oauthPurposeDescription:
            type: string
          oauthSecretName:
            type: string
          senderEmail:
            type: string
          deploymentRepoPath:
            type: string
    required:
      - data
      - applicationConfig
inputs:
  applicationConfig: ${variables.applicationConfig}
steps:
  extract-data-from-event:
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { data } = inputs;
        const emailField = data.fields[0]
        const nameField = data.fields[1]
        const uriEncodedId = encodeURIComponent(emailField.value);
        return {
          email: emailField.value,
          name: nameField.value,
          uriEncodedId,
        };
      }
    props:
      data: ${inputs.data}
  extract-application-name-from-event:
    runtime: nodejs20
    interface:
      inputs:
        properties:
          appNameField:
            example:
              {
                "key": "question_0dDJAA",
                "label": "Which microapp do you want to update?",
                "type": "DROPDOWN",
                "value": [
                  "c426210f-e82e-4259-ac93-f1bf3951da32"
                ],
                "options": [
                  {
                    "id": "c09e221a-dbdb-4c04-a9cb-1b78e72e4a26",
                    "text": "Short story bot"
                  },
                  {
                    "id": "c426210f-e82e-4259-ac93-f1bf3951da32",
                    "text": "Accounting bot"
                  },
                  {
                    "id": "d45666ba-7026-4067-841a-5ba51bb04ffb",
                    "text": "Application bot"
                  }
                ]
              }
            type: object
        required:
          - appNameField
    code: |
      exports.handler = async (inputs) => {
        const appNameField = inputs.appNameField;
        const appDropdownId = appNameField.value[0];
        return {
          applicationName: appNameField.options.find(option => option.id === appDropdownId).text
        };
      }
    props:
      appNameField: ${inputs.data.fields[1]}
  get-application-config-from-name:
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { applicationName, applicationConfig } = inputs;

        // Find the configuration for the given applicationName
        const appConfig = Object.entries(applicationConfig)
          .find(([id, config]) => config.appName === applicationName)?.[1];

        // Throw an error if no configuration is found
        if (!appConfig) {
          throw new Error(`No configuration found for applicationName ${applicationName}`);
        }

        // Return the found configuration
        return {
          appConfig,
        };
      };
    props:
      applicationName: ${extract-application-name-from-event.applicationName}
      applicationConfig: ${inputs.applicationConfig}
  create-environment:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/environment
      method: POST
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      data:
        name: "${extract-data-from-event.uriEncodedId}"
  create-deployment:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/deployment
      method: POST
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
      data:
        name: "${extract-data-from-event.uriEncodedId}"
        source: 
          repoUrl: "https://github.com/Edurata/edurata-workflows.git"
          path: ${get-application-config-from-name.appConfig.deploymentRepoPath} 
        environmentId: ${create-environment.response.data.id}
        variables: "{\"userEmail\": \"${extract-data-from-event.email}\"}"
  deploy-deployment:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: ${meta.apiUrl}/deployment/${create-deployment.response.data.id}/deploy
      method: POST
      headers:
        Authorization: "Bearer ${secrets.EDURATA_API_KEY}"
  send-oauth-email:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: etl/load/send-ses
    props:
      sender: ${get-application-config-from-name.appConfig.senderEmail}
      to: ${extract-data-from-event.email}
      subject: "${get-application-config-from-name.appConfig.appName}: Authorization needed"
      html_body: >
        Hey ${extract-data-from-event.name}!,
        <br><br>
        We need OAuth permissions to ${get-application-config-from-name.appConfig.oauthPurposeDescription}. Please click <a href="${meta.apiUrl}/oauth/google?s=${get-application-config-from-name.appConfig.oauthSecretName}&u=${meta.userId}&e=${extract-data-from-event.uriEncodedEmail}">here</a> to authorize us.
        You will be redirected to a page where you can authorize the third-party app.

        Best wishes,
        Edurata Team
        <br><br>
      AWS_ACCESS_KEY_ID: ${secrets.SHORT_STORY_KEY}
      AWS_SECRET_ACCESS_KEY: ${secrets.SHORT_STORY_SECRET}
