apiRevision: edurata.io/workflow/v1
name: hello-world
title: Testing all runtimes with a hello-world function.
description: The workflow starts with creating a message from provided inputs. This message is then used to test Python inline code, with the execution depending on a message from a previous node. The steps "test-python" and "test-node" depend on messages created from Python and the output of the "construct-message" step respectively. The workflow also includes testing a Docker upstream that displays a message from Docker dependent on the 'construct-message.string'. Lastly, it iterates over each item in the 'messages' input, returning a specific message if the item is either 'Hello' or 'World'.
interface:
  inputs:
    properties:
      messages:
        type: array
        items:
          type: string
        default:
        - Hello
        - World
  outputs:
    properties:
      messageFromDocker:
        type: string
      messageFromPython:
        type: string
      messageFromNode:
        type: string
outputs:
  messageFromDocker: ${test-docker-upstream.message}
  messageFromPython: ${test-python.message}
  messageFromNode: ${test-node.message}
steps:
  construct-message:
    description: This step involves constructing a message based on the inputted messages.
    runtime: nodejs20
    code: |
      exports.handler = async (event) => {
        return {
          string: event.messages.join(" ")
        };
      };
    props:
      messages: ${inputs.messages}
  test-python-inline-code:
    description: This step involves testing python inline code with a dependency on a message constructed from a string.
    runtime: python3_10
    code: |
      def handler(event):
        print("Hello, World!")
    props:
      message: 'Message from python inline: ${construct-message.string}'
  test-node-inline-code:
    description: This step involves executing an inline code that uses a message constructed from a previous node as a dependency.
    runtime: nodejs20
    code: |
      exports.handler = async (event) => {
        console.log("Hello, World!");
      };
    props:
      message: 'Message from node inline: ${construct-message.string}'
  test-python:
    description: This step, identified as "test-python", depends on a message constructed from python, which is received and processed as a part of the workflow automation.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: tests/python
    props:
      message: 'Message from python: ${construct-message.string}'
  test-node:
    description: This step, identified as "test-node", depends on the output of the "construct-message" step and uses its output string to create a message.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: tests/node
    props:
      message: 'Message from node: ${construct-message.string}'
  test-docker-upstream:
    description: This step involves testing a Docker upstream by executing a command that displays a message from Docker, which is dependent on the 'construct-message.string'.
    runtime: docker
    source:
      imageRepoUrl: docker/whalesay
      tag: latest
    interface:
      inputs:
        properties:
          cmd:
            type: cmdValue
            description: The command to run
    props:
      cmd:
      - cowsay
      - 'Message from docker: ${construct-message.string}'
  test-foreach-with-if:
    description: 'This step iterates over each item in the ''messages'' input, and if the item is either ''Hello'' or ''World'', it returns a message saying "Message from if foreach: " followed by the item.'
    foreach: ${inputs.messages}
    if:
      or:
      - ===:
        - ${each}
        - Hello
      - ===:
        - ${each}
        - World
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: tests/node
    props:
      message: 'Message from if foreach: ${each}'
