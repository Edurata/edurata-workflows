apiRevision: edurata.io/workflow/v1
name: update-microapp-user
title: Update Bot Info
description: |
  Automates the process of retrieving user information based on an email and applicationId, finding the corresponding configuration (sender email, subject, peopleTableId), and sending an update link via email.
interface:
  inputs:
    properties:
      data:
        type: object
        properties:
          fields:
            type: array
            items:
              type: object
              properties:
                label:
                  type: string
                value:
                  type: string
      applicationConfig:
        type: object
        description: |
          A mapping of applicationId to senderEmail, emailSubject, and peopleTableId.
    required:
      - data
      - applicationConfig
inputs:
  applicationConfig: ${variables.applicationConfig}
steps:
  extract-data-from-event:
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { data, appName } = inputs;
        const emailField = data.fields[0]
        return {
          email: emailField.value,
        };
      }
    props:
      appName: ${extract-application-name-from-event.applicationName}
      data: ${inputs.data}
    description: |
      Extracts the email address from the provided event data to be used in subsequent steps.
  extract-application-name-from-event:
    runtime: nodejs20
    interface:
      inputs:
        properties:
          appNameField:
            example:
              {
                "key": "question_0dDJAA",
                "label": "Which microapp do you want to update?",
                "type": "DROPDOWN",
                "value": [
                  "c426210f-e82e-4259-ac93-f1bf3951da32"
                ],
                "options": [
                  {
                    "id": "c09e221a-dbdb-4c04-a9cb-1b78e72e4a26",
                    "text": "Short story bot"
                  },
                  {
                    "id": "c426210f-e82e-4259-ac93-f1bf3951da32",
                    "text": "Accounting bot"
                  },
                  {
                    "id": "d45666ba-7026-4067-841a-5ba51bb04ffb",
                    "text": "Application bot"
                  }
                ]
              }
            type: object
        required:
          - appNameField
    code: |
      exports.handler = async (inputs) => {
        const appNameField = inputs.appNameField;
        const appDropdownId = appNameField.value[0];
        return {
          applicationName: appNameField.options.find(option => option.id === appDropdownId).text
        };
      }
    props:
      appNameField: ${inputs.data.fields[1]}
    description: |
      Extracts the application name from the provided event data by matching the selected application ID to its corresponding text label.
  get-application-config-from-name:
    runtime: nodejs20
    code: |
      exports.handler = async (inputs) => {
        const { applicationName, applicationConfig } = inputs;

        // Find the configuration for the given applicationName
        const appConfig = Object.entries(applicationConfig)
          .find(([id, config]) => config.appName === applicationName)?.[1];

        // Throw an error if no configuration is found
        if (!appConfig) {
          throw new Error(`No configuration found for applicationName ${applicationName}`);
        }

        // Return the found configuration
        return {
          appConfig,
        };
      };
    props:
      applicationName: ${extract-application-name-from-event.applicationName}
      applicationConfig: ${inputs.applicationConfig}
    description: |
      Retrieves the application configuration (sender email, subject, peopleTableId) based on the extracted application name. Throws an error if no configuration is found.
  find-in-airtable:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: general/axios
    props:
      url: 'https://api.airtable.com/v0/${get-application-config-from-name.appConfig.peopleTableId}?filterByFormula=AND(NOT(disabled),{email}="${extract-data-from-event.email}")'
      headers:
        Authorization: "Bearer ${secrets.AIRTABLE_API_KEY}"
    description: |
      Searches for the user in the Airtable database using the extracted email and ensures the user is not disabled.
  send-email:
    source:
      repoUrl: "https://github.com/Edurata/edurata-functions.git"
      path: etl/load/send-ses
    props:
      sender: ${get-application-config-from-name.appConfig.senderEmail}
      to: ${extract-data-from-event.email}
      subject: "${get-application-config-from-name.appConfig.appName}: Update your information"
      html_body: >
        Hey ${find-in-airtable.response.data.records[0].fields.name}!,
        <br><br>
        You requested a link to update your information.
        Please click <a href="${find-in-airtable.response.data.records[0].fields.updateUrl}">here</a> to do this.
        You will be redirected to an Airtable form where you can update your information.

        <br><br>
      AWS_ACCESS_KEY_ID: ${secrets.SHORT_STORY_KEY}
      AWS_SECRET_ACCESS_KEY: ${secrets.SHORT_STORY_SECRET}
    description: |
      Sends an email with an update link to the user using AWS SES. The sender, subject, and recipient email are dynamically retrieved from previous steps.
