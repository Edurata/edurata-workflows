apiRevision: edurata.io/workflow/v1
name: breakfast-info
title: Fetch daily weather and news for your location using a few example functions..
schedule: 0 8 * * *
description: "Automates the retrieval of daily weather and news for a given location and sends an email with the collected data. \nUses the OpenWeatherMap API for weather data and the NewsAPI for news data. \nDetermines the country based on latitude and longitude using Google's Geocoding API, fetches relevant weather and news data, and sends an email summary via AWS SES.\n"
interface:
  inputs:
    properties:
      lat:
        type: number
        description: |
          Latitude
      long:
        type: number
        description: |
          Longitude
      email:
        type: string
        description: |
          A registered email from AWS SES that should receive the message.
    required:
    - lat
    - long
  outputs:
    properties:
      weather:
        type: string
        description: Weather data
outputs:
  weather: ${fetch-weather.response.data.timelines.daily[0].values}
  news: ${fetch-news.response.data.articles}
steps:
  geo-data:
    description: This step involves making a GET request to the Google Maps Geocoding API, using a specific latitude and longitude to retrieve the corresponding country information, with the API key stored securely.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://maps.googleapis.com/maps/api/geocode/json?latlng=${inputs.lat},${inputs.long}&result_type=country&key=${secrets.GOOGLE_API_KEY}
      method: GET
      headers:
        Content-Type: application/json
  fetch-weather:
    description: This step fetches the weather forecast for a specified location from the Tomorrow.io API using a GET request.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://api.tomorrow.io/v4/weather/forecast?location=${inputs.lat},${inputs.long}&apikey=${secrets.WEATHER_API_KEY}
      method: GET
      headers:
        Content-Type: application/json
  fetch-news:
    description: This step fetches the top news headlines based on the country derived from the geo-data, using a GET request to the specified URL and the provided News API key.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://newsapi.org/v2/top-headlines?country=${geo-data.response.data.results[0].address_components[0].short_name}&apiKey=${secrets.NEWS_API_KEY}
      method: GET
      headers:
        Content-Type: application/json
  send-message:
    description: This step sends an email containing the day's weather and news headlines to the provided email address, using AWS for email sending.
    resources:
      memory: 2
      cpu: 1
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/send-ses
    props:
      sender: ${inputs.email}
      to: ${inputs.email}
      subject: Weather and news for today ${fetch-weather.response.data.timelines.daily[0].time}
      body: "Temperature: ${fetch-weather.response.data.timelines.daily[0].values.temperatureAvg}Â°C\nCloud coverage: ${fetch-weather.response.data.timelines.daily[0].values.cloudCoverAvg}%\nRain intensity: ${fetch-weather.response.data.timelines.daily[0].values.rainIntensityAvg}%\nNews: \n  - ${fetch-news.response.data.articles[0].title}\n  - ${fetch-news.response.data.articles[1].title}\n  - ${fetch-news.response.data.articles[2].title}\n  - ${fetch-news.response.data.articles[3].title}\n  - ${fetch-news.response.data.articles[4].title}\n"
      AWS_ACCESS_KEY_ID: ${secrets.AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${secrets.AWS_SECRET_ACCESS_KEY}
