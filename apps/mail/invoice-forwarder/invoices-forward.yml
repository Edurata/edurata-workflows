apiRevision: edurata.io/workflow/v1
name: invoice-processor
title: Invoice Processor
schedule: 0 9 * * *
description: |
  Automates the process of scanning inbox emails for invoices, extracting and downloading attachments, tagging emails in Gmail, saving invoices to a structured Google Drive folder, and forwarding them to a specified email address for further processing.
interface:
  inputs:
    properties:
      peopleTableId:
        type: string
        description: |
          The base id + table_id from which to take the people
      userEmail:
        type: string
        description: |
          The email address of the user
      config:
        type: object
        description: |
          The configuration of the invoice processor
        properties:
          gdriveFolderName:
            type: string
            description: |
              The Google Drive folder Name to save the invoices to
          forwardEmail:
            type: string
            description: |
              The email address to forward the invoices to
          successTag:
            type: string
            default: to-datev/processed
          failTag:
            type: string
            default: to-datev/failed
          skipTag:
            type: string
            default: to-datev/skipped
          additionalQuery:
            type: string
            description: |
              Additional query to filter the emails
            default: ''
    required:
    - config
    - userEmail
    - peopleTableId
inputs:
  config: ${variables.invoices_forward_config}
  peopleTableId: ${variables.accountingbot_people_table_id}
steps:
  get-people-data:
    description: This step retrieves data from an Airtable API for a specific user's email, provided the user is not disabled, using the Airtable API key for authorization.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://api.airtable.com/v0/${inputs.peopleTableId}?filterByFormula=AND(NOT(disabled),{email}="${inputs.userEmail}")
      headers:
        Authorization: Bearer ${secrets.AIRTABLE_API_KEY}
  merge-config:
    description: This step is merging the user configuration data retrieved from the 'get-people-data' response with the base configuration input.
    runtime: python3_10
    code: |
      def handler(inputs):
          user_config = inputs["user_config"]
          base_config = inputs["base_config"]
          # merge both together
          merged = {**base_config, **user_config}
          return  {"config": merged}
    props:
      user_config: ${get-people-data.response.data.records[0].fields}
      base_config: ${inputs.config}
  create-labels:
    description: This step creates labels in Gmail for success, failure, and skip tags, using a POST request to the Gmail API.
    foreach:
    - ${merge-config.config.successTag}
    - ${merge-config.config.failTag}
    - ${merge-config.config.skipTag}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://gmail.googleapis.com/gmail/v1/users/me/labels
      method: POST
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      data:
        name: ${each}
  get-label-ids:
    description: This step retrieves the label IDs from Gmail's API using a specified URL and authorization headers, depending on the creation of labels.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://gmail.googleapis.com/gmail/v1/users/me/labels
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      __create-labels: ${create-labels}
  transform-tags-to-label-ids:
    description: This step transforms tags into label IDs, using the label IDs obtained from the 'get-label-ids' step and the tags specified in the merge-config configuration (successTag, failTag, skipTag).
    runtime: python3_10
    code: |
      def handler(inputs):
          label_ids = {}
          for label in inputs["get-label-ids"]["response"]["data"]["labels"]:
            if label["name"] == inputs["successTag"]:
              label_ids["successTag"] = label["id"]
            elif label["name"] == inputs["failTag"]:
              label_ids["failTag"] = label["id"]
            elif label["name"] == inputs["skipTag"]:
              label_ids["skipTag"] = label["id"]
          return {"label_ids": label_ids}
    props:
      get-label-ids: ${get-label-ids}
      successTag: ${merge-config.config.successTag}
      failTag: ${merge-config.config.failTag}
      skipTag: ${merge-config.config.skipTag}
  get-new-mails-without-tag:
    description: This step is retrieving the ten most recent emails from the user's Gmail account that were received after January 1, 2021, have a PDF attachment, and do not have specific labels, using a provided API key for authorization.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://www.googleapis.com/gmail/v1/users/me/messages
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      params:
        q: after:2021/01/01 ${merge-config.config.addFilter} -label:${merge-config.config.successTag} -label:${merge-config.config.failTag} -label:${merge-config.config.skipTag} has:attachment filename:pdf
        maxResults: 10
      __create-labels: ${create-labels}
  continue-if-new-mails:
    description: This step continues the process if there are new emails without tags.
    if:
      and:
      - '>':
        - ${get-new-mails-without-tag.response.data.resultSizeEstimate}
        - 0
      - '!!': ${get-new-mails-without-tag.response.data.messages}
    runtime: python3_10
    code: |
      def handler(inputs):
          return {"mails": inputs["get-new-mails-without-tag"]["response"]["data"]["messages"]}
    props:
      get-new-mails-without-tag: ${get-new-mails-without-tag}
  get-mails-info:
    description: This step fetches detailed information for each new email message from the Gmail API, using the message ID, in a full format with specific fields such as 'id' and 'payload'.
    foreach: ${continue-if-new-mails.mails}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://gmail.googleapis.com/gmail/v1/users/me/messages/${each.id}
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      params:
        format: full
        fields: id,payload
  filter-attachments:
    description: This step involves filtering attachments from the data received from the 'get-mails-info' responses.
    source:
      repoUrl: https://github.com/Edurata/edurata-workflows.git
      path: apps/mail/invoice-forwarder/filter-attachments
    props:
      messages: ${get-mails-info[*].response.data}
  download-attachments:
    description: This step is downloading attachments from specific messages using the Gmail API, iterating over each filtered attachment from the previous step.
    foreach: ${filter-attachments.filtered_attachments}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      url: https://gmail.googleapis.com/gmail/v1/users/me/messages/${each.message_id}/attachments/${each.attachment_id}
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
  save-attachments:
    description: This step involves saving the data from downloaded attachments.
    runtime: python3_10
    props:
      attachments_data: ${download-attachments[*].response.data}
    interface:
      inputs:
        properties:
          attachments_data:
            type: array
            items:
              type: object
              properties:
                attachmentId:
                  type: string
                  description: |
                    The name of the attachment
                data:
                  type: string
            description: |
              The data of the attachments
      outputs:
        properties:
          new_files:
            type: array
            items:
              type: file
              description: |
                The new file name
    code: |
      import base64
      import uuid

      def correct_base64url_padding(data):
          # Add padding if necessary
          padding_needed = 4 - (len(data) % 4)
          if padding_needed and padding_needed < 4:
              data += '=' * padding_needed
          return data

      def handler(inputs):
          new_files = []
          for attachment_data in inputs["attachments_data"]:
              try:
                  # Correct the base64url padding
                  corrected_data = correct_base64url_padding(attachment_data["data"])
                  random_id = str(uuid.uuid4())
                  new_file = f"/tmp/{random_id}.pdf"
                  with open(new_file, "wb") as f:
                      f.write(base64.urlsafe_b64decode(corrected_data))
                  new_files.append(new_file)
              except (base64.binascii.Error, IOError) as e:
                  print(f"Error processing attachment: {e}")
                  # Handle the error as needed, e.g., skip the file or return an error response
          return {"new_files": new_files}
  forward-pdf:
    description: This step forwards a PDF by making a POST request to the Gmail API, using an encoded email attachment.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: https://gmail.googleapis.com/gmail/v1/users/me/messages/send
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      data:
        raw: ${encode_email_attachments.raw}
  encode_email_attachments:
    description: This step involves encoding email attachments for a specific user and forwarding them to a configured email address, given that the forward email configuration is set.
    if:
      '!!': ${merge-config.config.forwardEmail}
    else: success
    runtime: python3_10
    interface:
      inputs:
        properties:
          forwardEmail:
            type: string
            description: The email address to forward the attachments to
          attachments:
            type: array
            items:
              type: file
            description: A list of paths to the attachment files
      outputs:
        properties:
          raw:
            type: string
            description: The base64 encoded email message with multiple attachments
    code: "import base64\nimport email\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\nfrom email import encoders\nimport os\n\ndef handler(inputs):\n    sender = inputs[\"userEmail\"]\n    to = inputs[\"forwardEmail\"]\n    subject = \"Invoice\"\n    body = \"Please find the attached invoices.\"\n\n    # Create email message\n    msg = MIMEMultipart()\n    msg['From'] = sender\n    msg['To'] = to\n    msg['Subject'] = subject\n    msg.attach(MIMEText(body, 'plain'))\n\n    # Iterate over attachments and encode each one\n    for attachment_path in inputs[\"attachments\"]:\n        attachment_name = os.path.basename(attachment_path)\n        \n        with open(attachment_path, \"rb\") as attachment_file:\n            part = MIMEBase('application', 'octet-stream')\n            part.set_payload(attachment_file.read())\n            encoders.encode_base64(part)\n            part.add_header('Content-Disposition', f\"attachment; filename= {attachment_name}\")\n            msg.attach(part)\n\n    # Encode the message in base64 and prepare it for Gmail API\n    raw_message = base64.urlsafe_b64encode(msg.as_bytes()).decode()\n    return {\"raw\": raw_message}\n"
    props:
      userEmail: ${inputs.userEmail}
      forwardEmail: ${merge-config.config.forwardEmail}
      attachments: ${save-attachments.new_files}
  get-folder-id:
    description: This step involves obtaining the folder ID, provided that the Google Drive folder name in the merge-config is not null.
    runtime: python3_10
    if:
      '!!': ${merge-config.config.gdriveFolderName}
    code: |
      import datetime
      def handler(inputs):
          # today date like 2021-01-01
          today = datetime.datetime.now().strftime("%Y-%m-%d")
          return {"folder_name": today}
  create-folderpath:
    if:
      '!!': ${filter-attachments.filtered_attachments}
    description: This step creates a new folder path in Google Drive using the provided OAuth token and folder name, only if there are filtered attachments present.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: etl/load/create-gdrive-folderpath
    props:
      OAUTH_TOKEN: ${secrets.GMAIL_API_KEY}
      folder_path: ${merge-config.config.gdriveFolderName}/${get-folder-id.folder_name}
  get-parent-folder-id:
    description: This step is retrieving the ID of a parent folder from Google Drive using a GET request, with the folder name and API key as parameters.
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: GET
      url: https://www.googleapis.com/drive/v3/files
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      params:
        q: name='${get-folder-id.folder_name}' and mimeType='application/vnd.google-apps.folder'
      __create-folderpath: ${create-folderpath}
  upload-files-in-gdrive:
    description: This step uploads files to Google Drive, specifically to a parent folder, by iterating through each new file saved in the 'save-attachments' step, using the Gmail API key for authorization.
    foreach: ${save-attachments.new_files}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: clients/gdrive
    props:
      OAUTH_TOKEN: ${secrets.GMAIL_API_KEY}
      action: upload
      upload_file_name: ${filter-attachments.filtered_attachments[each.index].attachment_id}
      parent_folder_id: ${get-parent-folder-id.response.data.files[0].id}
      file_path: ${each}
  map-tags-to-threads:
    description: This step involves mapping tags to threads based on the properties of new emails without tags, filtered attachments, and specific success, fail, and skip tags.
    runtime: python3_10
    code: "def handler(inputs):\n    thread_to_tags = {}\n    for message in inputs[\"all_messages\"]:\n        thread_id = message[\"threadId\"]\n\n        # continue if already processed\n        if thread_id in thread_to_tags:\n            continue\n\n        is_in_filtered_attachments = False\n        for attachment in inputs[\"filtered_attachments\"]:\n            if attachment[\"message_id\"] == message[\"id\"]:\n                is_in_filtered_attachments = True\n                break\n        thread_to_tags[thread_id] = inputs[\"successTag\"] if is_in_filtered_attachments else inputs[\"skipTag\"]\n    \n    # make into list of objects\n    return [{\"threadId\": thread_id, \"tag\": tag} for thread_id, tag in thread_to_tags.items()]\n"
    props:
      all_messages: ${get-new-mails-without-tag.response.data.messages}
      filtered_attachments: ${filter-attachments.filtered_attachments}
      successTag: ${transform-tags-to-label-ids.label_ids.successTag}
      failTag: ${transform-tags-to-label-ids.label_ids.failTag}
      skipTag: ${transform-tags-to-label-ids.label_ids.skipTag}
  tag-emails:
    description: This step automates the process of tagging emails by posting a request to the Gmail API for each thread specified in the 'map-tags-to-threads' object, using the 'GMAIL_API_KEY' for authorization.
    foreach: ${map-tags-to-threads}
    source:
      repoUrl: https://github.com/Edurata/edurata-functions.git
      path: general/axios
    props:
      method: POST
      url: https://gmail.googleapis.com/gmail/v1/users/me/threads/${each.threadId}/modify
      headers:
        Authorization: Bearer ${secrets.GMAIL_API_KEY}
      data:
        addLabelIds:
        - ${each.tag}
        removeLabelIds: []
